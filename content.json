{"meta":{"title":"Welcome To Vientiane","subtitle":"VanXNF's Blog","description":"Record The Moments Of Time","author":"VanXNF","url":"https://vanxnf.top"},"pages":[{"title":"about","date":"2019-02-26T02:15:13.413Z","updated":"2019-02-26T02:15:13.413Z","comments":false,"path":"about/index.html","permalink":"https://vanxnf.top/about/index.html","excerpt":"","text":""},{"title":"search","date":"2019-02-26T01:41:35.718Z","updated":"2019-02-26T01:41:35.718Z","comments":false,"path":"search/index.html","permalink":"https://vanxnf.top/search/index.html","excerpt":"","text":""},{"title":"tag","date":"2019-02-26T01:44:08.349Z","updated":"2019-02-26T01:44:08.349Z","comments":false,"path":"tag/index.html","permalink":"https://vanxnf.top/tag/index.html","excerpt":"","text":""},{"title":"category","date":"2019-02-26T01:40:15.051Z","updated":"2019-02-26T01:40:15.051Z","comments":false,"path":"category/index.html","permalink":"https://vanxnf.top/category/index.html","excerpt":"","text":""}],"posts":[{"title":"WPS 背景色随主题变色问题","slug":"WPS-背景色随主题变色问题","date":"2018-11-03T09:05:03.000Z","updated":"2018-11-03T09:45:14.000Z","comments":true,"path":"2018/11/03/WPS-背景色随主题变色问题/","link":"","permalink":"https://vanxnf.top/2018/11/03/WPS-背景色随主题变色问题/","excerpt":"","text":"UBuntu 18.04 LTS 下使用 GNOME 深色主题会导致 WPS 出现一些奇奇怪怪的问题，之前使用了一段时间浅色主题应急，现在闲下来了，还是想办法解决一下，毕竟，深色党万岁。 问题描述 傻傻的 WPS 在我使用 GNOME 深色的主题后，就会出现如下图一样的问题： 实在是不能忍。同时，wps word 默认字体颜色会变为白色，背景色却仍旧是白色，搞得我好几次以为文档格式有问题，缺字少表的。安装了 LibreOffice 和 CrossOver 装的 Office 2016 就没有这个问题。虽说能用，但是还是不能忍。 解决方案 那么接下来是解决方案。首先，修改主题不太现实，万一我下次换个主题岂不是又要修改一遍。那么，问题的突破口就需要在 WPS 这里找了。在网上查到一些资料，desktop 快捷方式启动时可以传入一些参数。那么就编辑一下 WPS 的快捷方式，在里面试着指定主题就好了。 编辑 wps excel 的快捷方式： 1sudo vim /usr/share/applications/wps-office-et.desktop 显示内容如下： 1234567891011121314151617181920[Desktop Entry]Comment=Use WPS Spreadsheets to analyze manage data.Comment[zh_CN]=使用WPS表格分析、管理数据Exec=/usr/bin/et %fGenericName=WPS SpreadsheetsGenericName[zh_CN]=WPS 表格MimeType=application/wps-office.et;application/wps-office.ett;application/wps-office.xls;application/wps-office.xlt;application/vnd.ms-excel;application/msexcel;application/x-msexcel;application/wps-office.xlsx;application/wps-office.xltx;Name=WPS SpreadsheetsName[zh_CN]=WPS 表格StartupNotify=falseTerminal=falseType=ApplicationCategories=Office;Spreadsheet;Qt;X-DBUS-ServiceName=X-DBUS-StartupType=X-KDE-SubstituteUID=falseX-KDE-Username=Icon=wps-office-etmainInitialPreference=3StartupWMClass=et 将 Exec=/usr/bin/et %f 这一行修改为 Exec=/usr/bin/et -style Vimix %f 其中 Vimix 是我电脑上有的一个亮色主题，可以随意修改为自己有的就行。保存退出后再打开，问题已经解决。另外的两个也是同样的操作，就不再赘述。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"WPS","slug":"WPS","permalink":"https://vanxnf.top/tags/WPS/"}]},{"title":"Android 动画学习笔记","slug":"Android-动画学习笔记","date":"2018-10-27T02:16:50.000Z","updated":"2018-10-27T02:16:50.000Z","comments":true,"path":"2018/10/27/Android-动画学习笔记/","link":"","permalink":"https://vanxnf.top/2018/10/27/Android-动画学习笔记/","excerpt":"","text":"Android 最初提供的动画效果实现方式为逐帧动画和补间动画，然而它们均存在不同程度的缺陷。自从 Android 3.0 开始，系统提供了一种全新的动画效果———属性动画。本文也将基于属性动画的学习进行一些记录。 学习内容主要来自郭霖的博客，在这里先做一个记录： Android属性动画完全解析(上)，初识属性动画的基本用法 Android属性动画完全解析(中)，ValueAnimator和ObjectAnimator的高级用法 Android属性动画完全解析(下)，Interpolator和ViewPropertyAnimator的用法 ValueAnimator 未完待续。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://vanxnf.top/tags/Android/"},{"name":"Animator","slug":"Animator","permalink":"https://vanxnf.top/tags/Animator/"},{"name":"动画","slug":"动画","permalink":"https://vanxnf.top/tags/动画/"}]},{"title":"算法第二次作业及解析","slug":"算法第二次作业及解析","date":"2018-10-15T10:39:28.000Z","updated":"2018-10-15T10:39:28.000Z","comments":true,"path":"2018/10/15/算法第二次作业及解析/","link":"","permalink":"https://vanxnf.top/2018/10/15/算法第二次作业及解析/","excerpt":"","text":"算法分析题 下面的 7 个算法与本章中的二分搜索算法 BinarySearch 略有不同。请判断这 7 个算法的正确性。如果算法不正确，请说明产生错误的原因。如果算法正确，请给出算法的正确性证明。2-2 （1） 不正确，数组左右游标移动不正确，可能导致死循环。如数组 1 2 3 4，当 x = 4 时，将陷入死循环。 （2） 不正确，数组右游标将导致 x = a[n-1] 时无法获取正确结果。 （3） 不正确，数组右游标将导致 x = a[n-1] 时无法获取正确结果。 （4） 不正确，数组左右游标移动不正确，可能导致死循环。如数组 1 2 3 4，当 x = 4 时，将陷入死循环。 （5） 正确，比如在数组 1 2 3 4 4 中，当 x 取值为 1 或 3 或 4 或 5 这几个特殊位置时，算法工作正确，均可以返回正确的下标，且存在重复值时返回重复值最右侧的下标。 （6） 不正确，数组左右游标移动不正确，在数组有重复元素时，无法返回正确结果。 （7） 不正确，数组左右游标移动不正确，可能导致死循环。如数组 1 2 3 4，当 x = 1 或 2 时，将陷入死循环。 对所给元素存储于数组中和存储于链表中两种情形，写出自然合并排序算法 2-11 存储于数组中 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/** * 进行自然分组，并记录每个子串的起始坐标 * @param source 分组元数据 * @param record 记录子串起始坐标 * @param len 分组元数据个数 * @param count 自然分组个数(子串起始坐标个数) */template &lt;class Type&gt;void NaturalGrouping(Type source[], Type record[], int len, int &amp;count) &#123; int j = 0; record[j++] = 0;//第一个子串起始坐标为 0 for(int i = 0; i &lt; len - 1; i++) &#123; if(source[i + 1] &lt; source[i]) &#123; record[j++] = i + 1; &#125; &#125; count = j;&#125;/** * 合并c[l:m]和c[m+1:r]到d[1:r] * */template &lt;class Type&gt;void Merge(Type c[], Type d[], int l, int m, int r) &#123; int i = l, j = m + 1, k = l; while (i &lt;= m &amp;&amp; j &lt;= r) &#123; if (c[i] &lt;= c[j]) &#123; d[k++] = c[i++]; &#125; else &#123; d[k++] = c[j++]; &#125; &#125; if (i &gt; m) &#123; for (int q = j; q &lt;= r; q++) &#123; d[k++] = c[q]; &#125; &#125; else &#123; for (int q = i; q &lt;= m; q++) &#123; d[k++] = c[q]; &#125; &#125;&#125;/** * @param num 当前子数组个数 * @param count 子数组总个数 * */template &lt;class Type&gt;void MergePass(Type x[], Type y[], Type t[], int num, int len, int count) &#123; // 合并自然分组后相邻的子数组 int i = 0; while(i &lt;= count - 2 * num) &#123; // 当自然分组后的子数组个数为偶数时, r = n, 表示恰好两两合并 int r = ((i + 2 * num) &lt; count) ? t[i + 2 * num] : len; Merge(x, y, t[i], t[i + num] - 1, r - 1); i = i + 2 * num; &#125; if(i + num &lt; count) &#123; Merge(x, y, t[i], t[i + num] - 1, len - 1); &#125; else if (i &lt; count) &#123; // 剩余元素直接复制 for(int j = t[i]; j &lt;= len - 1; j++) &#123; y[j] = x[j]; &#125; &#125;&#125;/** * @param source 分组元数据 * @param record 子串起始坐标数据 * @param len 分组元数据个数 * @param count 自然分组个数 * */template &lt;class Type&gt;void MergeSort(Type source[], Type record[], int len, int count) &#123; Type *anotherSource = new Type[len]; int size = 1; while (size &lt; count) &#123; // 合并到数组 anotherSource MergePass(source, anotherSource, record, size, len, count); size += size; // 合并到数组 source MergePass(anotherSource, source, record, size, len, count); size += size; &#125;&#125; 存储于链表中 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788/** * 链表节点结构体 */template &lt;typename T&gt;struct link &#123; link(T value, link* next = nullptr) : next(next), value(value) &#123;&#125; link *next; T value;&#125;;/** * 合并链表 */template &lt;typename T, typename Compare&gt;link&lt;T&gt; *merge(link&lt;T&gt; *list1, link&lt;T&gt; *list2, Compare compare) &#123; link&lt;T&gt; *merged = nullptr, **mergedEnd = &amp;merged; while (list1 &amp;&amp; list2) &#123; if (compare(list1 -&gt; value, list2 -&gt; value)) &#123; *mergedEnd = list1; list1 = list1 -&gt; next; &#125; else &#123; *mergedEnd = list2; list2 = list2 -&gt; next; &#125; mergedEnd = &amp;((*mergedEnd) -&gt; next); &#125; if (list1) &#123; *mergedEnd = list1; &#125; else &#123; *mergedEnd = list2; &#125; return merged;&#125;/** * 设置默认排序规则 * 增序-less_equal&lt;T&gt;() * 降序-greater_equal&lt;T&gt;() */template &lt;typename T&gt;link&lt;T&gt; *NaturalMergeSort (link&lt;T&gt; *list) &#123; return NaturalMergeSort(list, less_equal&lt;T&gt;());&#125;template &lt;typename T, typename Compare&gt;link&lt;T&gt; *NaturalMergeSort(link&lt;T&gt; *list, Compare compare) &#123; vector&lt;link&lt;T&gt;*&gt; stack; while (list) &#123; link&lt;T&gt; *run = list, *runEnd = run; list = list -&gt; next; run -&gt; next = nullptr; //自然分组 while (list) &#123; if (compare(runEnd -&gt; value, list -&gt; value)) &#123; runEnd -&gt; next = list; runEnd = list; list = list -&gt; next; runEnd -&gt; next = nullptr; &#125; else if (!compare(run -&gt; value, list -&gt; value)) &#123; link&lt;T&gt; *tmp = list; list = list -&gt; next; tmp -&gt; next = run; run = tmp; &#125; else &#123; break; &#125; &#125; int i = 0; for (; i &lt; stack.size(); ++i) &#123; if (!stack[i]) break; run = merge(run, stack[i], compare); stack[i] = nullptr; &#125; if (i &lt; stack.size()) &#123; stack[i] = run; &#125; else &#123; stack.push_back(run); &#125; &#125; //合并链表 list = nullptr; for (link&lt;T&gt; *tmp : stack) &#123; list = merge(list, tmp, compare); &#125; return list;&#125; 如何修改 QuickSort 算法才能使其将输入元素按非增序排序？2-13 将 QuickSort 调用的 Partition() 函数中的： 12while (a[i++] &lt; x &amp;&amp; i &lt; r);while (a[j--] &gt; x); 改为： 12while (a[i++] &gt; x &amp;&amp; i &lt; r);while (a[j--] &lt; x); 即可实现降序排序。 算法实现题 有重复元素的排列问题。2-5 问题描述： 设 R=r1,r2,r3,...,rnR = {r_1,r_2,r_3,...,r_n}R=r​1​​,r​2​​,r​3​​,...,r​n​​ 是要进行排列的 n 个元素。其中 r1,r2,r3,...,rnr_1, r_2, r_3,...,r_nr​1​​,r​2​​,r​3​​,...,r​n​​ 可能相同。试设计一个算法，列出 R 的所有不同排列。 算法设计： 给定 n 及待排列的 n 个元素。计算出这 n 个元素的所有不同排列。 数据输入： 由文件 input.txt 提供输入数据。文件的第一行时元素个数 n，1≤n≤5001 \\leq n \\leq 5001≤n≤500。接下来的 1 行是待排列的 n 个元素。 结果输出： 将计算出的 n 个元素的所有不同排列输出到文件 output.txt。文件最后 1 行中的数是排列总数。 示例： 输入文件示例 输出文件示例 input.txt output.txt 4 aacc aacc acac acca caac caca ccaa 6 解题思路 全排列是第一个元素起，每个元素分别与它后面的元素交换位置。 有重复元素全排列，需要在进行变换时，对变换结果判定结果的唯一性。 全排列中去掉重复的规则：从第一个元素起每个元素分别与它后面非重复出现的元素交换。即第 i 个元素与第 j 个元素交换时，要求 [i, j) 中没有与第 j 个元素相等的元素。 算法实现 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788#include &lt;iostream&gt;#include&lt;fstream&gt;#include &lt;string&gt;#include &lt;sstream&gt;using namespace std;int count = 0;template &lt;class Type&gt;void ReadFile(int &amp;n, Type list[]) &#123; ifstream in; in.open(\"../input.txt\"); int line = 1;//行号标记 string s;//承载读取的每一行内容 while (getline(in, s)) &#123; if (line == 1) &#123; istringstream lineStr(s); lineStr &gt;&gt; n;//将字符转为 int 值 line ++; &#125; else &#123; for (int i = 0; i &lt; n; ++i) &#123; list[i] = s[i]; &#125; &#125; &#125; in.close();&#125;/** * 通过引用交换元素 */void Swap(char &amp;a, char &amp;b) &#123; char temp = a; a = b; b = temp;&#125;/** * 寻找 [start, end) 之间是否存在与 end 代表相同的元素 */ template &lt;class Type&gt;bool FindSameElement(Type list[], int start, int end) &#123; for (int i = start; i &lt; end; ++i) &#123; if (list[end] == list[i]) &#123; return true; &#125; &#125; return false;&#125;/** * 递归全排列，并将排列写入文件 */ template &lt;class Type&gt;void Perm(Type list[], int start, int end, ofstream &amp;out) &#123; if (start == end) &#123; for (int i = 0; i &lt; end; ++i) &#123; out&lt;&lt;list[i]; &#125; out&lt;&lt;endl; count ++; &#125; else &#123; for (int i = start; i &lt; end; ++i) &#123; if (FindSameElement(list, start, i)) &#123; continue; &#125; Swap(list[start], list[i]); Perm(list, start+1, end, out); Swap(list[start], list[i]); &#125; &#125;&#125;int main() &#123; int n = 0; char list[100]; ReadFile(n, list); ofstream out; out.open(\"../output.txt\"); Perm(list, 0, n, out); out&lt;&lt;count; out.close(); cout&lt;&lt;\"It works!\"; return 0;&#125; 集合划分问题。 2-8 问题描述： n 个元素的集合 {1, 2, …, n} 可以划分为若干非空子集。例如，当 n = 4 时，集合 {1, 2, 3 , 4} 可以划分为 15 个不同的非空子集如下： { {1}, {2}, {3}, {4} } { {1, 3}, {2, 4} } { {1, 2}, {3}, {4} } { {1, 4}, {2, 3} } { {1, 3}, {2}, {4} } { {1, 2, 3}, {4} } { {1, 4}, {2}, {3} } { {1, 2, 4}, {3} } { {2, 3}, {1}, {4} } { {1, 3, 4}, {2} } { {2, 4}, {1}, {3} } { {2, 3, 4}, {1} } { {3, 4}, {1}, {2} } { {1, 2, 3, 4} } { {1, 2}, {3, 4} } 其中，集合 { {1, 2, 3, 4} } 由一个子集组成；集合 { {1, 2}, {3, 4} } ，{ {1, 3}, {2, 4} }，{ {1, 4}, {2, 3} }，{ {1, 2, 3}, {4} }，{ {1, 2, 4}, {3} }，{ {1, 3, 4}, {2} }，{ {2, 3, 4}, {1} } 由两个子集组成；集合{ {1, 2}, {3}, {4} }，{ {1, 3}, {2}, {4} }，{ {1, 4}, {2}, {3} }，{ {2, 3}, {1}, {4} }，{ {2, 4}, {1}, {3} }，{ {3, 4}, {1}, {2} } 由三个子集组成；集合 { {1}, {2}, {3}, {4} } 由四个子集组成。 算法设计： 给定正整数 n 和 m，计算出 n 个元素的集合 {1, 2, …, n} ，可以划分为多少个不同的由 m 个非空子集组成的集合。 数据输入： 由文件 input.txt 提供输入数据。文件的第一行是元素个数 n 和非空子集数 m。 结果输出： 将计算出的不同的由 m 个非空子集组成的集合数输出到文件 output.txt。 示例： 输入文件示例 输出文件示例 input.txt output.txt 4 3 6 解题思路 把 n 个元素编号，对于最后那个 n 号元素，有两种情况: 独立组成一个集合 与其他元素组成一个集合 对于第一种情况，将前面 n-1 个元素分成 m-1 个集合，n 号元素单独组成集合。 对于第二种情况，将前面 n-1 个元素分成 m 个集合，n 号元素放入前 m 个集合中的一个。 划分总数为： F(n,m)=F(n−1,m−1)+m×F(n−1,m)F(n,m) =F(n-1,m-1) + m \\times F(n-1,m) F(n,m)=F(n−1,m−1)+m×F(n−1,m) 同时列举一下特殊情况： m = n 的情况，结果为 1。 m = 1 的情况，结果为 1。 n = 1 的情况，结果为 1。 算法实现 123456789101112131415161718192021222324252627282930313233343536#include &lt;iostream&gt;#include &lt;fstream&gt;#include &lt;string&gt;#include &lt;sstream&gt;using namespace std;int SetPartition(int n ,int m) &#123; if ((m &gt; n) || (m == 0)) &#123; return 0; &#125; else if ((m == 1) || (n == 1) || (m == n)) &#123; return 1; &#125; else &#123; return (SetPartition(n-1, m-1) + m * SetPartition(n-1, m)); &#125;&#125;int main() &#123; int n = 0; int m = 0; ifstream in; ofstream out; in.open(\"../input.txt\"); string str; while (getline(in, str)) &#123; istringstream line(str); line &gt;&gt; n &gt;&gt; m; &#125; in.close(); out.open(\"../output.txt\"); out &lt;&lt; SetPartition(n, m); out.close(); cout &lt;&lt; \"It Works\"; return 0;&#125;","categories":[{"name":"Homework","slug":"Homework","permalink":"https://vanxnf.top/categories/Homework/"}],"tags":[{"name":"作业","slug":"作业","permalink":"https://vanxnf.top/tags/作业/"},{"name":"算法","slug":"算法","permalink":"https://vanxnf.top/tags/算法/"}]},{"title":"Android Studio: /dev/kvm device permission denied","slug":"Android-Studio-dev-kvm-device-permission-denied","date":"2018-10-06T04:01:21.000Z","updated":"2018-10-06T04:01:21.000Z","comments":true,"path":"2018/10/06/Android-Studio-dev-kvm-device-permission-denied/","link":"","permalink":"https://vanxnf.top/2018/10/06/Android-Studio-dev-kvm-device-permission-denied/","excerpt":"","text":"问题 Android Studio 报 Android Studio: /dev/kvm device permission denied 错误。 解决方案 方案来自stackoverflow As mentioned in the comments, starting with Ubuntu 18.04 and Linux Mint Tara you need to first 1sudo apt install qemu-kvm. To check the ownership of /dev/kvm use 1ls -al /dev/kvm The user was root, the group kvm. To check which users are in the kvm group, use 1grep kvm /etc/group This returned 1kvm:x:some_number: on my system: as there is nothing rightwards of the final :, there are no users in the kvm group. To add the user yourname to the kvm group, you could use 1sudo adduser yourname kvm which adds the user to the group, and check once again with grep kvm /etc/group. As mentioned by @Knossos, you might want to log out and back in (or restart), for the permissions to take effect.","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://vanxnf.top/tags/Android/"},{"name":"kvm","slug":"kvm","permalink":"https://vanxnf.top/tags/kvm/"}]},{"title":"Android Studio 资源文件分包","slug":"Android-Studio-资源文件分包","date":"2018-10-04T13:29:07.000Z","updated":"2018-10-04T13:29:07.000Z","comments":true,"path":"2018/10/04/Android-Studio-资源文件分包/","link":"","permalink":"https://vanxnf.top/2018/10/04/Android-Studio-资源文件分包/","excerpt":"","text":"写在前面 随着 Android 开发的不断推进，Android 项目内的资源文件会越来越多，在寻找时带来一些麻烦，因此对资源的分包势在必行。 资源分包 方法很简单，先创建好文件夹，然后配置 app 文件夹下的 build.gradle 文件，比如我的： 12345678android &#123; ... sourceSets &#123; main &#123; res.srcDirs(&apos;src/main/res&apos;, &apos;src/main/res_account&apos;) &#125; &#125;&#125; 此时 sync project 即可。要新增资源文件夹时也在此处操作。","categories":[{"name":"Android","slug":"Android","permalink":"https://vanxnf.top/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://vanxnf.top/tags/Android/"}]},{"title":"GNOME SHELL 拓展","slug":"GNOME-SHELL-拓展","date":"2018-10-04T12:11:55.000Z","updated":"2018-10-04T12:11:55.000Z","comments":true,"path":"2018/10/04/GNOME-SHELL-拓展/","link":"","permalink":"https://vanxnf.top/2018/10/04/GNOME-SHELL-拓展/","excerpt":"","text":"在使用 Ubuntu 18.04 后发现了不少好用的 GNOME SHELL 拓展插件，在此做一个推荐及备份。以下插件排名不分先后。 system-monitor Display system informations in gnome shell status bar, such as memory usage, cpu usage, network rates… &amp;nsbp; 在顶栏显示系统硬件状态，十分直观。在 Ubuntu 软件商店中即可安装，可能会遇到依赖问题，会有提示，按照具体提示安装即可，我当时提示缺少 Clutter，那就安装咯： 1sudo apt-get install gir1.2-clutter-1.0 gir1.2-clutter-gst-3.0 gir1.2-gtkclutter-1.0 Clipboard Indicator Clipboard Manager extension for Gnome-Shell - Adds a clipboard indicator to the top panel, and caches clipboard history. 剪贴板管理，在顶栏查看选择历史剪贴板。 Coverflow Alt-Tab Replacement of Alt-Tab, iterates through windows in a cover-flow manner. Dash to Dock A dock for the Gnome Shell. This extension moves the dash out of the overview transforming it in a dock for an easier launching of applications and a faster switching between windows and desktops. Side and bottom placement options are available. 取代系统 dock 栏。 Gnome Shell Audio Output Switcher Gnome-Shell Extension: Easily switch between your audio outputs from the system menu. Lock Keys Numlock &amp; Capslock status on the panel. Multi Monitors Add-On Add multiple monitors overview and panel for gnome-shell. 外接屏幕神器。 OpenWeather Weather extension to display weather information from https://openweathermap.org/ or https://darksky.net for almost all locations in the world. For openweathermap.org, you can either use the extensions default-key or register at https://openweathermap.org/appid and set the appropriate switch in the preferences dialog to “off”. For Dark Sky you have to register at https://darksky.net/dev/register and get a personal API-key. Since version 29 this extensions uses coordinates to store the locations and makes the names editable to support multiple weather-providers! If you update from versions prior to 29 to 29 or greater (with darksky.net - support) you have to recreate your locations. Pixel Saver Pixel Saver is designed to save pixel by fusing activity bar and title bar in a natural way. Screenshot Tool Conveniently create, copy, store and upload screenshots. TopIcons Plus This extension moves legacy tray icons (bottom left of Gnome Shell) to the top panel. It is a fork from the original extension from ag with settings for icon opacity, saturation, padding, size and tray position, along with a few minor fixes and integration with the Skype integration extension. User Themes Load shell themes from user directory. 万物之源。 Suspend Button Allows to modify the suspend/shutdown button in the status menu.","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"GNOME","slug":"GNOME","permalink":"https://vanxnf.top/tags/GNOME/"},{"name":"SHELL","slug":"SHELL","permalink":"https://vanxnf.top/tags/SHELL/"}]},{"title":"Markdown 转换为 Word、Pdf 解决方案","slug":"Markdown-转换为-Word、Pdf-解决方案","date":"2018-09-30T15:04:48.000Z","updated":"2018-09-30T15:04:48.000Z","comments":true,"path":"2018/09/30/Markdown-转换为-Word、Pdf-解决方案/","link":"","permalink":"https://vanxnf.top/2018/09/30/Markdown-转换为-Word、Pdf-解决方案/","excerpt":"","text":"问题描述 写完的 markdown 文档，需要快速导出为其他格式。 解决方案 Windows 下采用插件方案，安装一个名为 Writage 的 word 插件，即可使用 word 打开 markdown 文件，可以此转换为其他格式的文档。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Markdown","slug":"Markdown","permalink":"https://vanxnf.top/tags/Markdown/"},{"name":"Word","slug":"Word","permalink":"https://vanxnf.top/tags/Word/"},{"name":"Pdf","slug":"Pdf","permalink":"https://vanxnf.top/tags/Pdf/"}]},{"title":"Android Design Patterns","slug":"Android-Design-Patterns","date":"2018-09-30T02:23:02.000Z","updated":"2018-09-30T02:23:02.000Z","comments":true,"path":"2018/09/30/Android-Design-Patterns/","link":"","permalink":"https://vanxnf.top/2018/09/30/Android-Design-Patterns/","excerpt":"","text":"《Android 源码设计模式解析与实战》阅读笔记 面向对象的六大原则 单一职责原则 Single Responsibility Principle 单一职责原则，缩写为 SRP，定义为：就一个类而言，应该仅有一个引起它变化的原因。关键在于对职责的定义，什么是类的职责，什么是划分类的职责。 开闭原则 Open Close Principle 开闭原则，缩写为 OCP，定义为：软件中的对象（类、模块、函数等）应该对于拓展是开放的，但是对于修改是封闭的。当软件需要变化时，应该尽量通过拓展的方式来实现变化，可通过依赖注入等手段实现可拓展性，。 里氏替换原则 Liskov Substitution Principle 里氏替换原则，缩写为 LSP。 第一种定义为：如果对每一个类型为 S 的对象 O1，都有类型为 T 的对象 O2，使得以 T 定义的所有程序 P 在所有的对象 O1 都代换成 O2 时，程序 P 的行为没有发生变化，那么类型 S 为类型 T 的子类型。 第二种定义为：所有引用基类的地方必须能透明地使用其子类的对象。 里氏替换原则的核心原理是抽象，抽象又依赖于继承这个特性。实际编码中里氏替换原则和开闭原则通常结合使用，首先建立抽象，通过抽象建立规范，具体的实现在运行时替换掉抽象，保证系统的拓展性、灵活性。 依赖倒置原则 Dependence Inversion Principle &amp;nsbp;依赖倒置原则，缩写为 DIP。依赖倒置原则指代一种特定的解耦方式，使得高层次的模块不依赖于低层次的模块的实现细节的目的（高层次模块为调用模块，低层次模块为具体实现模块）。其有以下几个关键点： 高层模块不应该依赖低层模块，两者都应该依赖其抽象。 抽象不应该依赖细节。 细节应该依赖抽象。 依赖倒置原则在 Java 中的表现为：模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的。 一句话概括：依赖抽象，而不依赖具体实现。 接口隔离原则 Interface Segregation Principle 接口隔离原则，缩写是 ISP，定义为：客户端不应该依赖它不需要的接口。另一种定义是：类间的依赖关系应该建立在最小的接口上。该原则目的在于使系统解耦合，从而容易重构、更改和重新部署。 迪米特原则 Law of Demeter 迪米特原则，缩写为 LOD，也称最少知识原则（Least Knowledge Principle)。定义为：一个对象应该对其他对象有最少的了解。另一个英文解释为：Only talk to your immedate friends。每个对象都必然会与其他对象存在耦合关系，两个对象之间的耦合就称为朋友关系。只与直接耦合的对象通信，减小系统的耦合性，提高拓展性。 SOLID 原则 早在 21 世纪早期， Bob 大叔（Robert C Martin）将单一职责、开闭原则、里氏替换、接口隔离以及依赖倒置（也称依赖反转）5 个原则定义为 SOLID 原则。其核心关键词为：抽象、单一职责、最小化。","categories":[{"name":"Android","slug":"Android","permalink":"https://vanxnf.top/categories/Android/"}],"tags":[{"name":"Android","slug":"Android","permalink":"https://vanxnf.top/tags/Android/"},{"name":"Design Patterns","slug":"Design-Patterns","permalink":"https://vanxnf.top/tags/Design-Patterns/"}]},{"title":"Windows 10 环境变量小记","slug":"Windows-10-环境变量小记","date":"2018-09-29T23:44:26.000Z","updated":"2018-09-29T23:44:26.000Z","comments":true,"path":"2018/09/30/Windows-10-环境变量小记/","link":"","permalink":"https://vanxnf.top/2018/09/30/Windows-10-环境变量小记/","excerpt":"","text":"新买了一个固态硬盘，打算重装一下系统，在此记录一下环境变量的配置情况，以便恢复环境作为参考。 系统变量 JAVA 变量名： JAVA_HOME 变量值： C:\\Program Files\\Java\\jdk1.8.0_172 然后在 path 中添加以下内容： %JAVA_HOME%\\bin 再新建一个系统变量： 变量名：CLASSPATH 变量值：.;%JAVA_HOME%\\lib;%JAVA_HOME%\\lib\\dt.jar;%JAVA_HOME%\\lib\\tools.jar ADB ADB 需要链接到 Android Sdk 安装的目录下，我是在安装 Android Studio 时默认安装，则变量如下： 变量名 ADB_HOME 变量值 C:\\Users\\VanXN\\AppData\\Local\\Android\\Sdk\\platform-tools;C:\\Users\\VanXN\\AppData\\Local\\Android\\Sdk\\tools 再在 path 中添加 一条 %ADB_HOME% 值即可。 MAVEN Maven 没什么好说的，直接添加即可： 变量名 MAVEN_HOME 变量值 D:\\Maven\\apache-maven-3.5.4 在 path 中新增一条 %MAVEN_HOME%\\bin 值即可。 用户变量 OneDrive OneDrive 的默认路径可以在此处更改。","categories":[{"name":"Settings","slug":"Settings","permalink":"https://vanxnf.top/categories/Settings/"}],"tags":[{"name":"Windows 10","slug":"Windows-10","permalink":"https://vanxnf.top/tags/Windows-10/"},{"name":"环境变量","slug":"环境变量","permalink":"https://vanxnf.top/tags/环境变量/"}]},{"title":"Windows 10 配置 Maven 环境","slug":"Windows-10-配置-Maven-环境","date":"2018-09-26T02:10:21.000Z","updated":"2018-09-26T02:10:21.000Z","comments":true,"path":"2018/09/26/Windows-10-配置-Maven-环境/","link":"","permalink":"https://vanxnf.top/2018/09/26/Windows-10-配置-Maven-环境/","excerpt":"","text":"下载 Maven 首先从 http://maven.apache.org/download.cgi 下载 Maven 压缩包， apache-maven-3.5.4-bin.zip 或者 apache-maven-3.5.4-bin.tar.gz 均可。下载完成后解压即可，我解压后文件夹路径为 D:\\Maven\\apache-maven-3.5.4。Maven 文件夹是我自行创建的，可随意更换。 创建本地仓库 在 D:\\Maven\\ 下另外创建一个文件夹 LocalRepository 用作本地仓库，名字可自取。 进入 D:\\Maven\\apache-maven-3.5.4\\conf 文件夹下，编辑 settings.xml 文件，找到下面的内容： 123456&lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt; 在下方添加一条本地仓库记录，路径写成自己创建的本地仓库文件夹路径，修改完成后如下: 1234567&lt;!-- localRepository | The path to the local repository maven will use to store artifacts. | | Default: $&#123;user.home&#125;/.m2/repository &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt; --&gt; &lt;localRepository&gt;D:\\Maven\\LocalRepository&lt;/localRepository&gt; 配置环境变量 系统变量下新建一个变量，名称为 Maven，变量值为 Maven 解压路径，即上面的 D:\\Maven\\apache-maven-3.5.4, 然后在 path 变量下添加一条值 %Maven%\\bin，保存退出即可。 测试 到此基本配置完毕了，输入以下命令测试是否成功： 1mvn --version 返回版本号即为成功。","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Windows 10","slug":"Windows-10","permalink":"https://vanxnf.top/tags/Windows-10/"},{"name":"Maven","slug":"Maven","permalink":"https://vanxnf.top/tags/Maven/"}]},{"title":"Atom 配置代理以及自用插件整理","slug":"Atom-配置代理以及-Markdown-插件推荐","date":"2018-09-26T01:40:13.000Z","updated":"2018-09-26T01:40:13.000Z","comments":true,"path":"2018/09/26/Atom-配置代理以及-Markdown-插件推荐/","link":"","permalink":"https://vanxnf.top/2018/09/26/Atom-配置代理以及-Markdown-插件推荐/","excerpt":"","text":"Atom 配置代理 代理需要自己准备好，方法很简单，使用以下命令即可： 123apm config set strict-ssl falseapm config set http-proxy http://127.0.0.1:8080apm config set https-proxy http://127.0.0.1:8080 Atom 插件整理 markdown-preview-plus 主要用 Atom 来写 Markdown 博客，这个插件预览就很舒服，还可以支持公式。 platformio-ide-terminal 可以在 Atom 内直接使用终端进行以下操作。 language-markdown Markdown 语法补全。 git-plus git 命令拓展。","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Atom","slug":"Atom","permalink":"https://vanxnf.top/tags/Atom/"},{"name":"Markdown","slug":"Markdown","permalink":"https://vanxnf.top/tags/Markdown/"},{"name":"Proxy","slug":"Proxy","permalink":"https://vanxnf.top/tags/Proxy/"}]},{"title":"Windows 10 配置 Git","slug":"Windows-10-配置-Git","date":"2018-09-26T01:11:07.000Z","updated":"2018-09-26T01:11:07.000Z","comments":true,"path":"2018/09/26/Windows-10-配置-Git/","link":"","permalink":"https://vanxnf.top/2018/09/26/Windows-10-配置-Git/","excerpt":"","text":"下载安装 Git 首先从 Git 官网 下载安装包，基本保持默认选项，安装即可。 安装完成后，Git bash 或者 cmd 中可以输入 git --version，验证是否安装成功，输出版本号即为安装成功。 配置用户 安装完成有配置一下全局的用户名和邮箱，输入如下命令： 12git config --global user.name &quot;自定义用户名&quot;git config --global user.email &quot;邮箱&quot; 使用如下命令可以取消全局设置： 12git config --global --unset user.namegit config --global --unset user.email 生成 SSH 秘钥 输入下面的命令生成 SSH Key: 1ssh-keygen -t rsa -C &quot;邮箱&quot; 生成单个 SSH Key 时可以连续回车，不输入密钥文件名字和密码。生成的秘钥在 C:\\Users\\用户名\\.ssh 下。其中 id_rsa.pub 为公钥，用文本编辑器打开后，复制内容添加到 Github SSH 列表中即可。 托管秘钥至 ssh-agent 执行以下命令即可将秘钥添加至 ssh-agent： 1ssh-add ~/.ssh/id_rsa 添加失败时，出现错误 Could not open a connection to your authentication agent 可执行以下命令： 1ssh-agent bash 再添加秘钥即可。 测试连接 执行以下命令： 1ssh -T git@github.com 出现类似返回内容，即为添加成功。 1You&apos;ve successfully authenticated, but GitHub does not provide shell access.","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Windows 10","slug":"Windows-10","permalink":"https://vanxnf.top/tags/Windows-10/"},{"name":"Git","slug":"Git","permalink":"https://vanxnf.top/tags/Git/"}]},{"title":"人工智能第一课","slug":"人工智能第一课","date":"2018-09-20T10:35:26.000Z","updated":"2018-09-20T10:35:26.000Z","comments":true,"path":"2018/09/20/人工智能第一课/","link":"","permalink":"https://vanxnf.top/2018/09/20/人工智能第一课/","excerpt":"","text":"AI AI 进入新一轮爆发期，2016 年被称为 AI 元年。 根本原因 算法突破 数据井喷 计算能力 直接原因 算法开源 政府支持 投资活跃 应用广泛 人才储备 阅读拓展 经济观察报 FT 中文网 中关村在线 虎嗅 kindle 家庭、朋友、事业、健康、爱好","categories":[{"name":"AI","slug":"AI","permalink":"https://vanxnf.top/categories/AI/"}],"tags":[{"name":"AI","slug":"AI","permalink":"https://vanxnf.top/tags/AI/"},{"name":"人工智能","slug":"人工智能","permalink":"https://vanxnf.top/tags/人工智能/"}]},{"title":"算法第一次作业及解析","slug":"算法第一次作业及解析","date":"2018-09-16T06:05:34.000Z","updated":"2018-09-30T00:19:28.000Z","comments":true,"path":"2018/09/16/算法第一次作业及解析/","link":"","permalink":"https://vanxnf.top/2018/09/16/算法第一次作业及解析/","excerpt":"","text":"算法分析题 求下列函数的渐近表达式(1-1) 3n2+10n3n^2+10n3n​2​​+10n n210+2n\\frac{n^2}{10} + 2^n​10​​n​2​​​​+2​n​​ 21+1n21+ \\frac{1}{n}21+​n​​1​​ logn3\\log n^3logn​3​​ 10log3n10 \\log 3^n10log3​n​​ 解析: 3n2+10n=O(n2)3n^2+10n = O(n^2)3n​2​​+10n=O(n​2​​) n210+2n=O(2n)\\frac{n^2}{10} + 2^n = O(2^n)​10​​n​2​​​​+2​n​​=O(2​n​​) 21+1n=O(1)21+ \\frac{1}{n} = O(1)21+​n​​1​​=O(1) logn3=O(logn)\\log n^3 = O(\\log n)logn​3​​=O(logn) 10log3n=O(n)10 \\log 3^n = O(n)10log3​n​​=O(n) 按照渐近阶从低到高的顺序排列以下表达式，又 n!n!n! 应该排在哪里？(1-3) 4n2,logn,3n,20n,2,n234n^2, \\log n, 3^n, 20n, 2, n^\\frac{2}{3} 4n​2​​,logn,3​n​​,20n,2,n​​3​​2​​​​ 解析: 排序后如下： 2,logn,n23,20n,4n2,3n,n!2, \\log n, n^{\\frac{2}{3}}, 20n, 4n^2, 3^n, n! 2,logn,n​​3​​2​​​​,20n,4n​2​​,3​n​​,n! 对于下列各组函数 f(n) 和 g(n)，确定 f(n) = O(g(n)) 或 f(n) = \\Omega (g(n)) 或 f(n) = \\theta (g(n))，请简述理由。(1-6) f(n)=logn2f(n) = \\log n^2f(n)=logn​2​​; g(n)=logn+5g(n) = \\log n + 5g(n)=logn+5 f(n)=logn2f(n) = \\log n^2f(n)=logn​2​​; g(n)=ng(n) = \\sqrt ng(n)=√​n​​​ f(n)=nf(n) = nf(n)=n; g(n)=log2ng(n) = \\log^2ng(n)=log​2​​n f(n)=nlogn+nf(n) = n \\log n + nf(n)=nlogn+n; g(n)=logng(n) = \\log ng(n)=logn f(n)=10f(n) = 10f(n)=10; g(n)=log10g(n) = \\log 10g(n)=log10 f(n)=log2nf(n) = \\log^2nf(n)=log​2​​n; g(n)=logng(n) = \\log ng(n)=logn f(n)=2nf(n) = 2^nf(n)=2​n​​; g(n)=100n2g(n) = 100n^2g(n)=100n​2​​ f(n)=2nf(n) = 2^nf(n)=2​n​​; g(n)=3ng(n) = 3^ng(n)=3​n​​ 解析: 因为 f(n) 与 g(n) 同阶，因此f(n)=θ(g(n))f(n) = \\theta(g(n))f(n)=θ(g(n)) 因为 f(n) 的阶不高于 g(n) 的阶，因此f(n)=O(g(n))f(n) = O(g(n))f(n)=O(g(n)) 因为 f(n) 的阶不低于 g(n) 的阶，因此f(n)=Ω(g(n))f(n) = \\Omega(g(n))f(n)=Ω(g(n)) 因为 f(n) 的阶不低于 g(n) 的阶，因此f(n)=Ω(g(n))f(n) = \\Omega(g(n))f(n)=Ω(g(n)) 因为 f(n) 与 g(n) 同阶，因此f(n)=θ(g(n))f(n) = \\theta(g(n))f(n)=θ(g(n)) 因为 f(n) 的阶不低于 g(n) 的阶，因此f(n)=Ω(g(n))f(n) = \\Omega(g(n))f(n)=Ω(g(n)) 因为 f(n) 的阶不低于 g(n) 的阶，因此f(n)=Ω(g(n))f(n) = \\Omega(g(n))f(n)=Ω(g(n)) 因为 f(n) 的阶不高于 g(n) 的阶，因此f(n)=O(g(n))f(n) = O(g(n))f(n)=O(g(n)) 算法实现题 统计数字问题(1-1) 问题描述：一本书的页码从自然数 1 开始顺序编码到自然数 n。书的页码按照通常的习惯编排，每个页码都不包含多余的前导数字 0。例如第 6 页用数字 6 表示，而不是 06 或 006 等。数字计数问题要求对给定书的总页码 n，计算出书的全部页码中分别用到了多少次数字 0,1,2,…，9。 算法设计：给定表示书的总页码的十进制整数 n (1≤n≤109)n\\ (1 \\leq n \\leq 10^9)n (1≤n≤10​9​​)，计算书的全部页码中分别用到多少次数字 0,1,2,…,9。 数据输入：输入数据由文件名为 input.txt 的文本文件提供。每个文件共有 1 行，给出表示书的总页码的整数 n。 结果输出：将计算结果输出到文件 output.txt。输出文件共有 10 行，在第 k 行输出页码中用到数字 k-1 的次数，k=1,2,…,10。 输入文件示例 输出文件示例 input.txt output.txt 11 1 4 1 1 1 1 1 1 1 1 暴力方法统计实现 1234567891011121314151617181920212223242526272829303132333435363738#include &lt;stdio.h&gt;int main() &#123; int n; //书总页数 int sum[10]= &#123;0&#125;; //用于储存数字出现次数 //读取输入文件 FILE *fpRead = fopen(\"../input.txt\", \"r\"); if (fpRead == NULL) &#123; printf(\"An Error occurred while getting the file!\"); return 0; &#125; fscanf(fpRead, \"%d\", &amp;n); fclose(fpRead); //暴力方法统计 for (int i = 1; i &lt;= n; ++i) &#123; int temp = i; while (temp) &#123; sum[temp % 10]++;//获取末尾数字 temp = temp / 10;//位数减小一位 &#125; &#125; //写入输出文件 FILE *fpWrite = fopen(\"../output.txt\", \"w\"); if(fpWrite == NULL) &#123; printf(\"An Error occurred while writing to the file!!\"); return 0; &#125; for (int j = 0; j &lt; 10; ++j) &#123; if (j != 9) &#123; fprintf(fpWrite, \"%d\\n\", sum[j]); &#125; else &#123; fprintf(fpWrite, \"%d\", sum[j]); &#125; &#125; fclose(fpWrite); printf(\"It Works!\");&#125; 公式统计实现 由 0,1,2…9 组成的所有 n 位数，即从 0 至 999……99。从 n 个 0 到 n 个 9 共有 10n10^n10​n​​ 个 n 位数。在这 10n10^n10​n​​ 个 n 位数中，0,1,2…9 每个数字使用次数相同，设为f(n)f(n)f(n)。 f(n)f(n)f(n) 满足如下递推式： n &gt; 1: f(n)=10⋅f(n−1)+10n−1f(n) = 10 \\cdot f(n-1)+10^{n-1}f(n)=10⋅f(n−1)+10​n−1​​ n = 1: f(n)=1f(n) = 1f(n)=1 由此可知，f(n)=n⋅10n−1f(n) = n\\cdot10^{n-1}f(n)=n⋅10​n−1​​。因此，可从高位向低位进行统计，再减去多余的 0 的个数即可。 即对于一个 n 位数 m：抛去最高位 x，其低 n-1 位恰好就是 n-1 个 0到 n-1 个 9 共 10^{n-1}个数。利用公式 f(n) = n\\cdot10^{n-1}，在这个区间里，每个数字出现的次数（不包括最高位数字）为 (n−1)⋅10n−2(n-1) \\cdot 10^{n-2}(n−1)⋅10​n−2​​。那么在 0 到 n 之间上述所说的区间共有 x 个。那么每个数字出现的次数 x 倍就可以统计完这些区间。 再看最高位数字 x 的情况，0 到 x-1 这些数字在最高位上再现的次数为 10n−110^{n-1}10​n−1​​，因为一个区间长度为 10n−110^{n-1}10​n−1​​。而 x 在最高位上出现次数就是 m%10n−1+1m\\%10^{n-1} +1m%10​n−1​​+1 了。接下来 m%10n−1m\\%10^{n-1}m%10​n−1​​ 对 m 去掉最高位后的那个数字再继续重复上面的方法。直到个位时，就可以完成题目要求了。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;stdio.h&gt;#include &lt;math.h&gt;int main() &#123; int n; //页码 //读取输入文件 FILE *fpRead = fopen(\"../input.txt\", \"r\"); if (fpRead == NULL) &#123; printf(\"An Error occurred while getting the file!\"); return 0; &#125; fscanf(fpRead, \"%d\", &amp;n); fclose(fpRead); int len; //len 记录当前数字的位权 int now; //now 记录当前最高位数字在 num 数组中的下标 int high; //high 表示当前最高位的数字 int sum[10] = &#123;0&#125;; //数字使用计数 char num[10]; len = (int) log10(n); int maxLen = len; //记录最高位的位权 int pow10[10] = &#123;1&#125;; for(int i = 1; i &lt; 10; i++) &#123; pow10[i] = pow10[i-1] * 10; &#125; sprintf(num, \"%d\", n); now = 0; high = num[now] - '0'; n %= pow10[len]; // 去掉n的最高位 while(len &gt; 0) &#123; if(high == 0) &#123; sum[0] += n + 1; high = num[++now] - '0'; --len; n %= pow10[len]; continue; &#125; // 重复 high 次 for (int i = 0; i &lt; 10; i++) &#123; sum[i] += high * len * pow10[len-1]; &#125; for (int i = 0; i &lt; high; i++) &#123; sum[i] += pow10[len]; &#125; sum[high] += n + 1; //sum[high] 在最高位上出现次数是 n %= pow10[len] +1 --len; high = num[++now] - '0'; n %= pow10[len]; //再次去掉当前最高位 &#125; // 个位时 for(int i = 0; i &lt;= high; i++) &#123; sum[i] += 1; &#125; // 减去前导0的个数 for(int i = 0; i &lt;= maxLen; i++) &#123; sum[0] -= pow10[i]; &#125; //写入输出文件 FILE *fpWrite = fopen(\"../output.txt\", \"w\"); if(fpWrite == NULL) &#123; printf(\"An Error occurred while writing to the file!!\"); return 0; &#125; for (int j = 0; j &lt; 10; ++j) &#123; if (j != 9) &#123; fprintf(fpWrite, \"%d\\n\", sum[j]); &#125; else &#123; fprintf(fpWrite, \"%d\", sum[j]); &#125; &#125; fclose(fpWrite); printf(\"It Works!\"); return 0;&#125;","categories":[{"name":"Homework","slug":"Homework","permalink":"https://vanxnf.top/categories/Homework/"}],"tags":[{"name":"作业","slug":"作业","permalink":"https://vanxnf.top/tags/作业/"},{"name":"算法","slug":"算法","permalink":"https://vanxnf.top/tags/算法/"}]},{"title":"Ubuntu 18.04 LTS 安装 Tex Live","slug":"Ubuntu-18-04-LTS-安装-Tex-Live","date":"2018-09-15T14:35:29.000Z","updated":"2018-09-16T03:33:26.000Z","comments":true,"path":"2018/09/15/Ubuntu-18-04-LTS-安装-Tex-Live/","link":"","permalink":"https://vanxnf.top/2018/09/15/Ubuntu-18-04-LTS-安装-Tex-Live/","excerpt":"","text":"下载安装包 如果身在国内，推荐改用国内的镜像，比如清华大学的 tuna。以下都以这个镜像为例。 在 https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/ 下载 install-tl-unx.tar.gz，解压并进入文件夹 install-tl-20180915。日期请按照你解压的文件夹名字来。 执行以下命令安装： 1234wget https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gztar -xzf install-tl-unx.tar.gzcd install-tl-20180915sudo ./install-tl 没有特殊需要的话，collection 可以不必全部安装，尤其是很多小语种。不过后果是之后可能会缺包。不愿意之后手动安装，并且空间足够、网速足够，也可以全部安装。注意 TeX Live 完全安装后大约要占 6 GB 空间，安装前请务必做好准备。中途断网很可能导致安装失败。其他选项没有必要保持默认即可。 环境变量设置 此时 TeX Live 虽已安装，但其路径对于 Linux 来说仍是不可识别的。所以需要更改环境变量。 打开 ~/.zshrc (非 zsh 用户 修改 bashrc)，在最后添加： 123export PATH=/usr/local/texlive/2018/bin/x86_64-linux:$PATHexport MANPATH=/usr/local/texlive/2018/texmf-dist/doc/man:$MANPATHexport INFOPATH=/usr/local/texlive/2018/texmf-dist/doc/info:$INFOPATH 还需保证开启 sudo 模式后路径仍然可用。命令行中执行 1sudo visudo 找到如下一段代码 123Defaults env_resetDefaults mail_badpassDefaults secure_path=&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&quot; 将第三行更改为: 1Defaults secure_path=&quot;/usr/local/texlive/2018/bin/x86_64-linux:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin&quot; 也就是加入 TeX Live 的执行路径。如果在安装时作了修改，这里的路径也都要与安装时的保持一致。 字体设置 要在整个系统中使用 TeX 字体，还需要将 TeX 自带的配置文件复制到系统目录下。命令行中执行: 1sudo cp /usr/local/texlive/2018/texmf-var/fonts/conf/texlive-fontconfig.conf /etc/fonts/conf.d/09-texlive.conf 之后再执行 1sudo fc-cache -fv 刷新字体数据库。 检查 到此整个 TeX Live 2018 就已经安装完毕。可以做下面的一些检查： 基本命令： 1234tlmgr --versionpdftex --versionxetex --versionluatex --version 包管理器： 1sudo tlmgr update --list 这一步是检查更新，如果有就顺手更了吧： 1sudo tlmgr update --self --all --self 用来更新 tlmgr 自身，如果上一步没有提示可以不加这个选项。 测试 可以编译一个简短的测试文件： 12345% hello.tex\\documentclass[UTF8]&#123;ctexart&#125;\\begin&#123;document&#125;欢迎来到 \\TeX&#123;&#125; 世界！\\end&#123;document&#125; 用 xelatex 或 lualatex 编译： 12xelatex hellolualatex hello 编译得到的 PDF 文件如果显示正常，则说明 TeX Live 基本工作正常。","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"Tex Live","slug":"Tex-Live","permalink":"https://vanxnf.top/tags/Tex-Live/"}]},{"title":"操作系统第一次课后作业及解析","slug":"操作系统第一次课后作业及解析","date":"2018-09-15T02:45:13.000Z","updated":"2018-09-15T02:45:13.000Z","comments":true,"path":"2018/09/15/操作系统第一次课后作业及解析/","link":"","permalink":"https://vanxnf.top/2018/09/15/操作系统第一次课后作业及解析/","excerpt":"","text":"设计现代OS的主要目标是什么？ 有效性 方便性 可扩充性 开放性 OS的作用可表现在哪几个方面？ OS作为用户与计算机硬件系统之间的接口 OS作为计算机系统资源的管理者 OS实现了对计算机资源的抽象 实现分时系统的关键问题是什么？应如何解决？ 关键问题是当用户在自己的终端上键入命令时，系统应能及时接收并及时处理该命令，在用户能接受的时延内将结果返回给用户。 解决方法：针对及时接收问题，可以在系统中设置多路卡，使主机能同时接收用户从各个终端上输入的数据；为每个终端配置缓冲区，暂存用户键入的命令或数据。针对及时处理问题，应使所有的用户作业都直接进入内存，并且为每个作业分配一个时间片，允许作业只在自己的时间片内运行，这样在不长的时间内，能使每个作业都运行一次。 试从交互性、及时性以及可靠性方面，将分时系统与实时系统进行比较。 及时性：实时信息处理系统对实时性的要求与分时系统类似，都是以人所能接受 的等待时间来确定；而实时控制系统的及时性，是以控制对象所要求的开始截止时间或完成 截止时间来确定的，一般为秒级到毫秒级，甚至有的要低于100微妙。 交互性：实时信息处理系统具有交互性，但人与系统的交互仅限于访问系统中某 些特定的专用服务程序。不像分时系统那样能向终端用户提供数据和资源共享等服务。 可靠性：分时系统也要求系统可靠，但相比之下，实时系统则要求系统具有高度 的可靠性。因为任何差错都可能带来巨大的经济损失，甚至是灾难性后果，所以在实时系统 中，往往都采取了多级容错措施保障系统的安全性及数据的安全性。 OS有哪几大特征？其最基本的特征是什么？ OS 具有并发性、共享性、虚拟性和异步性四个特征。 最基本的特征是并发性。 是什么原因使操作系统具有异步性特征？ 操作系统的异步性体现在三个方面： 进程的异步性，进程以人们不可预知的速度向前推进 程序的不可再现性，即程序执行的结果有时是不确定的 程序执行时间的不可预知性，即每个程序何时执行，执行顺序以及完成时间是不确定的。","categories":[{"name":"Homework","slug":"Homework","permalink":"https://vanxnf.top/categories/Homework/"}],"tags":[{"name":"操作系统","slug":"操作系统","permalink":"https://vanxnf.top/tags/操作系统/"},{"name":"作业","slug":"作业","permalink":"https://vanxnf.top/tags/作业/"}]},{"title":"Hexo 使用 MathJax 渲染公式并解决渲染冲突问题","slug":"Hexo-使用-MathJax-渲染公式并解决渲染冲突问题","date":"2018-09-11T09:53:08.000Z","updated":"2018-09-11T09:53:08.000Z","comments":true,"path":"2018/09/11/Hexo-使用-MathJax-渲染公式并解决渲染冲突问题/","link":"","permalink":"https://vanxnf.top/2018/09/11/Hexo-使用-MathJax-渲染公式并解决渲染冲突问题/","excerpt":"","text":"Hexo 是默认支持 mathjax 公式渲染的，但依然需要解决渲染冲突。 更改渲染引擎 卸载默认渲染引擎并安装另一个： 12npm uninstall hexo-renderer-marked --savenpm install hexo-renderer-kramed --save 这里的安装可能出问题，可以先更新一下 npm 再安装（需要权限）： 1npm install -g npm 解决渲染冲突 然后更改 /node_modules/hexo-renderer-kramed/lib/renderer.js 中的： 12345// Change inline math rulefunction formatText(text) &#123; // Fit kramed&apos;s rule: $$ + \\1 + $$ return text.replace(/`\\$(.*?)\\$`/g, &apos;$$$$$1$$$$&apos;);&#125; 为： 1234// Change inline math rulefunction formatText(text) &#123; return text;&#125; 然后找到博客目录下的 /node_modules/kramed/lib/rules/inline.js 进行下列修改： 1234//escape: /^\\\\([\\\\`*&#123;&#125;\\[\\]()#$+\\-.!_&gt;])/, 第11行，将其修改为escape: /^\\\\([`*\\[\\]()#$+\\-.!_&gt;])/,//em: /^\\b_((?:__|[\\s\\S])+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 第20行，将其修改为em: /^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/, 上面的改动取消了公式中 _ 的渲染，原本会被渲染为 &lt;em&gt; 标签以表示斜体，在公式中表示下标。另外还取消了 \\, {, } 的转义。 此时出现在公式中下标和换行的问题就完美解决了。 使用 LATEX 编辑公式 MathJax 是一个开源 JavaScript 库。它支持 LaTeX、MathML、AsciiMath 符号，可以运行于所有流行浏览器上。 这里已经配置好了，我们只需要了解 LATEX 语法来书写公式就可以了。 至于 LATEX 语法可参考: markdown使用LaTex输入数学公式类 Cmd Markdown 公式指导手册","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://vanxnf.top/tags/Hexo/"},{"name":"MathJax","slug":"MathJax","permalink":"https://vanxnf.top/tags/MathJax/"}]},{"title":"算法设计与分析","slug":"算法设计与分析","date":"2018-09-11T09:28:59.000Z","updated":"2018-09-11T11:07:34.000Z","comments":true,"path":"2018/09/11/算法设计与分析/","link":"","permalink":"https://vanxnf.top/2018/09/11/算法设计与分析/","excerpt":"","text":"第一章 概述 算法学习的重要性 主要内容： 递归/分治 动态规划 贪心算法 回溯算法 分枝限界 高级数据结构 复杂度理论 随机算法 近似算法 并行算法 算法的特性 有输入：有外部提供的量作为算法的输入。 有输出：算法产生至少一个量作为输出。 确定性：组成算法的每条指令都是清晰的，无歧义的。 有限性：算法中每条指令的执行次数是有限的，执行每条指令的时间也是有限的。 复杂性分析 算法复杂性即算法所需要的计算机资源。 暴力求解方法 Brute：force；暴风，强力；布鲁特-福斯 常用思路： 遍历解空间 答案表 可排序 不可排序 时间复杂性/空间复杂性 C=F(N,I,A)C = F(N,I,A)C=F(N,I,A) N 是问题的规模，I 是具体输入。 主要考虑以下两个方面： 问题的规模 具体的输入 最优、最差、平均运行时间 worst-case: Tmax(N)=I∈Dmax T(N,I)T_{max}(N) = {_{I\\in D}^{max}}\\ T(N,I) T​max​​(N)=​I∈D​max​​ T(N,I) best-case Tmin(N)= I∈Dmin T(N,I)T_{min}(N) = \\ {_{I\\in D}^{min}}\\ T(N,I) T​min​​(N)= ​I∈D​min​​ T(N,I) average-case Tavg(N)=∑I∈D P(I)T(N,I)T_{avg}(N) = \\sum_{I\\in D}\\ P(I) T(N,I) T​avg​​(N)=​I∈D​∑​​ P(I)T(N,I) 渐近符号 OOO 的定义：若存在正常数 C 和自然数 N。使得当 N≥N0N\\geq N_0N≥N​0​​ 时有 f(N)≤C⋅g(N)f(N)\\leq C\\cdot g(N)f(N)≤C⋅g(N) 则称函数 f(N)f(N)f(N) 当 N 充分大时， g(N)g(N)g(N) 是它的一个上界，即 f(N)f(N)f(N) 的阶不高于 g(N)g(N)g(N)。 Ω\\OmegaΩ 的定义：若存在正常数 C 和自然数 N。使得当 N≥N0N\\geq N_0N≥N​0​​ 时有 f(N)≥C⋅g(N)f(N)\\geq C\\cdot g(N)f(N)≥C⋅g(N) 则称函数 f(N)f(N)f(N) 当 N 充分大时， g(N)g(N)g(N) 是它的一个下界，即 f(N)f(N)f(N) 的阶不低于 g(N)g(N)g(N)。 θ\\thetaθ 的定义：定义 f(N)=θ(g(n))f(N) = \\theta(g(n))f(N)=θ(g(n)) 当且仅当 f(N)=O(g(n))f(N) = O(g(n))f(N)=O(g(n)) 且 f(N)=Ω(g(N))f(N) = \\Omega (g(N))f(N)=Ω(g(N)) 即 f(N)f(N)f(N) 与 g(N)g(N)g(N) 同阶。 O(f)+O(g)=O(max(f⋅g))O(f) + O(g) = O(max( f \\cdot g))O(f)+O(g)=O(max(f⋅g)) O(f)+O(g)=O(f+g)O(f) + O(g) = O(f + g)O(f)+O(g)=O(f+g) O(f)∗O(g)=O(f⋅g)O(f) * O(g) = O(f \\cdot g)O(f)∗O(g)=O(f⋅g) 若 g(N) = O(f(N))，则 O(f) + O(g) = O(\\theta ) 基本效率类型 搜索 遍历 排序 2重循环 3重循环 求 n 个元素子集 求全排列 log2nlog_2nlog​2​​n n n⋅log2nn\\cdot log_2nn⋅log​2​​n n2n^2n​2​​ n3n^3n​3​​ 2n2^n2​n​​ n!n!n! 3.3 10 3.3 10210^210​2​​ 10310^310​3​​ 10310^310​3​​ 3.6⋅1063.6\\cdot 10^63.6⋅10​6​​ 6.6 100 6.6×106.6 \\times 106.6×10 10410^410​4​​ 10610^610​6​​ 1.3×10301.3 \\times 10^{30}1.3×10​30​​ 9.3×101579.3 \\times 10^{157}9.3×10​157​​ 10 10310^310​3​​ 1.0×1041.0 \\times 10^41.0×10​4​​ 10610^610​6​​ 10910^910​9​​ 13 10410^410​4​​ 1.3×1051.3 \\times 10^51.3×10​5​​ 10810^810​8​​ 101210^{12}10​12​​ 17 10510^510​5​​ 1.7×1061.7 \\times 10^61.7×10​6​​ 101010^{10}10​10​​ 101510^{15}10​15​​ 20 10610^610​6​​ 2.0×1072.0 \\times 10^72.0×10​7​​ 101210^{12}10​12​​ 101810^{18}10​18​​ NP 完全性理论 可能的下界 平凡下界 信息论下界 NP完全性理论 P: 在确定计算模型下，多项式时间可解。 NP: 在非确定计算模型下： 猜一个解。 验证上面的解，在多项式时间完成。 NP-C: D 是 NPC，在 NP 问题集合中的任何一个问题都能够在多项式时间内被转化成 D。 例子： 哈密顿回路 旅行商问题 背包问题 划分问题 装箱问题 图着色问题 第二章 递归与分治 递归 定义 直接或间接调用自身的算法 优点 编码便利 缺点 展开的代价巨大 未完待续","categories":[{"name":"Algorithm","slug":"Algorithm","permalink":"https://vanxnf.top/categories/Algorithm/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://vanxnf.top/tags/算法/"},{"name":"algorithm","slug":"algorithm","permalink":"https://vanxnf.top/tags/algorithm/"}]},{"title":"在 Atom 中快速输入时间戳","slug":"在-Atom-中快速输入时间戳","date":"2018-09-03T10:30:58.000Z","updated":"2018-09-03T10:30:58.000Z","comments":true,"path":"2018/09/03/在-Atom-中快速输入时间戳/","link":"","permalink":"https://vanxnf.top/2018/09/03/在-Atom-中快速输入时间戳/","excerpt":"","text":"问题 如何在 Atom 中可以快速插入时间戳？ 解决方案 修改 Atom 启动脚本 在 atom 中选择 edit -&gt; Preferences会弹出 Settings 标签页，选择底部的 Open Config Folder，此时在弹出窗口找到 ~/.atom/init.coffee ，在文件中添加如下代码： 123456789101112131415161718192021222324252627282930313233daysOfWeek = ['日', '一', '二', '三', '四', '五', '六']pad = (str, length) -&gt; str = String(str) str = '0' + str while(str.length &lt; length) strdateOrTime = (kind) -&gt; now = new Date() yyyy = now.getYear() + 1900 mm = pad(now.getMonth() + 1, 2) dd = pad(now.getDate(), 2) ddd = daysOfWeek[now.getDay()] hh24 = pad(now.getHours(), 2) mi = pad(now.getMinutes(), 2) ss = pad(now.getSeconds(), 2) if kind == 1 \"#&#123;yyyy&#125;-#&#123;mm&#125;-#&#123;dd&#125; #&#123;ddd&#125;)\" else if kind == 2 \"#&#123;hh24&#125;:#&#123;mi&#125;:#&#123;ss&#125;\" else # \"#&#123;yyyy&#125;-#&#123;mm&#125;-#&#123;dd&#125;(#&#123;ddd&#125;) #&#123;hh24&#125;:#&#123;mi&#125;:#&#123;ss&#125;\" \"#&#123;yyyy&#125;-#&#123;mm&#125;-#&#123;dd&#125; #&#123;hh24&#125;:#&#123;mi&#125;:#&#123;ss&#125;\"insertText = (str) -&gt; return unless editor = atom.workspace.getActiveTextEditor() selection = editor.getLastSelection() selection.insertText(str)atom.commands.add 'atom-text-editor', 'atom-date:date', -&gt; insertText(dateOrTime(1))atom.commands.add 'atom-text-editor', 'atom-date:time', -&gt; insertText(dateOrTime(2))atom.commands.add 'atom-text-editor', 'atom-date:datetime', -&gt; insertText(dateOrTime(0)) 设置快捷键 编辑同一目录下的 keymap.cson，在里面添加如下代码： 1234&apos;atom-text-editor&apos;: &apos;alt-d&apos;: &apos;atom-date:date&apos; &apos;alt-t&apos;: &apos;atom-date:time&apos; &apos;alt-n&apos;: &apos;atom-date:datetime&apos; 保存后重启 Atom。 使用方法 Alt + d : 2018-09-03-一) Alt + t : 18:44:41 Alt + n : 2018-09-03 18:44:59","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Atom","slug":"Atom","permalink":"https://vanxnf.top/tags/Atom/"},{"name":"timestamps","slug":"timestamps","permalink":"https://vanxnf.top/tags/timestamps/"}]},{"title":"Hexo 博客 Hiker 主题增加文章最后编辑时间，并按照最后编辑时间排序","slug":"Hexo-博客-Hiker-主题增加文章最后编辑时间，并按照最后编辑时间排序","date":"2018-09-03T08:12:07.000Z","updated":"2018-09-03T10:46:02.000Z","comments":true,"path":"2018/09/03/Hexo-博客-Hiker-主题增加文章最后编辑时间，并按照最后编辑时间排序/","link":"","permalink":"https://vanxnf.top/2018/09/03/Hexo-博客-Hiker-主题增加文章最后编辑时间，并按照最后编辑时间排序/","excerpt":"","text":"前言 写在前面，建好了 Hexo 博客之后，慢慢的文章也写了十几篇了，发现一个问题：无法知道这篇文章最后更新于什么时候。一篇文章发布得越早，就在越下面，可是我想让它把我重新编辑过的文章排到前头来啊，同时也想让文章能够显示最后更新于什么时候。有需求那就去解决啊，可是搜索了谷歌、百度，发现全世界都用的是 Next 主题，给的方案也是针对 Next 主题的，对我所用的 Hiker 主题完全不适用啊，于是，经过一番摸索，就有了这篇文章。废话结束了，下面开始正文。 开启 Updated 排序 在 Hexo 内部，是支持 updated 这个参数的，意思就是，你在建立文章的时候，已经默认地给你添加了一个名为 update 的参数。但这个数据只是添加在 db.json 中，并不会添加到你的 md 文件中。但它的效果其实和你直接在 md 文件中写是一样的，像下面这样： 12345title:date:updated:tags:categories: 但是写在 md 文件中更加的方便，能够手动的控制更新日期，避免 db.json 被删除后，‘更新日期’数据丢失的情况出现。因此我们需要让 Hexo 默认生成的 post格式中存在 updated 这个属性，以免每次需要手动输入。(手写是不可能手写的，这辈子都不可能的) 调整 post 默认生成格式 我的 Hexo 博客主目录为 Hexo，之后的操作就在这个目录下了。 post 的生成模板在 Hexo/scaffolds/ 里，那个 post.md就是了。打开这个文件，因为生成的时候发布时间和最后更新时间一样的嘛，改成如下内容后保存即可： 12345---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;updated: &#123;&#123; date &#125;&#125;--- 这个时候你就可以生成一篇新的博客看看有没有效果了。你想加别的内容也是这样修改。之后修改了文章内容之后，把 updated 后面的时间改一下就 OK 了。 使用 Atom 写博客的快速输入 update 时间戳，可以查看 在 Atom 中快速输入时间戳 调整 Hexo 主配置文件 然后找到主配置文件 _config.yml（注意：不是主题的 _config.yml），修改 index_generator 的 order_by 为 -updated 即可开启更新时间排序，你最后修改过的文章就会显示到最前面了: 12345678# Home page setting# path: Root path for your blogs index page. (default = &apos;&apos;)# per_page: Posts displayed per page. (0 = disable pagination)# order_by: Posts order. (Order by date descending by default)index_generator: path: &apos;&apos; per_page: 10 order_by: -updated &amp;nbp;但是你发现修改过之后，文章只显示到时期，根本看不到时间对不对，那么继续修改 date_format 部分，改成如下的 YYYY-MM-DD HH:mm:ss格式，再重新生成一下网页就能看到具体的时间了。 123456# Date / Time format## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DD HH:mm:sstime_format: HH:mm:ss 修改 Hiker 主题 Hiker 主题默认是没有更新时间显示的，所以需要自己修改，新增一个更新时间显示。hiker 文件夹位于 Hexo/themes/hiker 。首先查看了 hiker/layout 文件夹下的 post.ejs 文件，发现里面引入的是 _partial/article的内容，好的，找到 hiker/layout/_partial 文件夹下的 article.ejs，因为是修改时间嘛，那就找 date 相关的内容，于是找到了 9-13 行： 12345&lt;div class=&quot;article-meta&quot;&gt; &lt;%- partial(&apos;post/date&apos;, &#123;class_name: &apos;article-date&apos;, date_format: null&#125;) %&gt; &lt;%- partial(&apos;post/category&apos;) %&gt; &lt;%- partial(&apos;post/busuanzi-analytics&apos;,&#123;index: index, class_name: &apos;article-views&apos;&#125;) %&gt;&lt;/div&gt; 看第10行，原来是引用的 post/date，那就打开 hiker/layout/_partial/post 文件夹下的 date.ejs，看到如下内容： 12345&lt;% if (!is_current(&quot;about&quot;, false))&#123; %&gt; &lt;a href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;&lt;%= class_name %&gt;&quot;&gt; &lt;time datetime=&quot;&lt;%= date_xml(post.date) %&gt;&quot; itemprop=&quot;datePublished&quot;&gt;&lt;%= date(post.date, date_format) %&gt;&lt;/time&gt; &lt;/a&gt;&lt;% &#125; %&gt; 到这里也就清楚了，我们主要需要关注的文件是 hiker/layout/_partial/post/date.ejs、hiker/layout/_partial/article.ejs，这两个文件。那么接下来开始修改。 新建 updated.ejs 文件 由于 date.ejs 这个文件在很多地方会被引用到，可谓是牵一发而动全身啊，如果你改在这个文件上，就会发现所有原本出现发布时间的地方同时还会有更新时间，看上去真的是有点丑啊。我不需要它在文章正文以外的部分出现更新时间，所以选择新建一个 updated.ejs 文件，就放在 date.ejs 所在的 post 文件夹。 Updated.ejs 内容如下： 12345&lt;% if (!is_current(&quot;about&quot;, false))&#123; %&gt; &lt;a href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;&lt;%= class_name %&gt;&quot;&gt; &lt;%= __(&apos;updated&apos;) %&gt; &lt;time datetime=&quot;&lt;%= date_xml(post.updated) %&gt;&quot; itemprop=&quot;dateUpdated&quot;&gt;&lt;%= date(post.updated, date_format) %&gt;&lt;/time&gt; &lt;/a&gt;&lt;% &#125; %&gt; 大体上与 date.ejs 内容相仿，post.date 改成了 post.updated，细心的读者还会发现，多了一个 &lt;%= __('updated') %&gt;，这是因为原来的格式只显示时间，那么当我们全部修改好之后，就会发现文章下面确实有两个时间，但不知道哪个是哪个，看的人很乱（这里不接受修改时间当然比发布时间迟的一看就知道了这样的吐槽），为了用户体验，还是加上提示比较好。同样的，可以将 date.ejs 的内容修改成如下所示： 12345&lt;% if (!is_current(&quot;about&quot;, false))&#123; %&gt; &lt;a href=&quot;&lt;%- url_for(post.path) %&gt;&quot; class=&quot;&lt;%= class_name %&gt;&quot;&gt; &lt;%= __(&apos;published&apos;) %&gt; &lt;time datetime=&quot;&lt;%= date_xml(post.date) %&gt;&quot; itemprop=&quot;datePublished&quot;&gt;&lt;%= date(post.date, date_format) %&gt;&lt;/time&gt; &lt;/a&gt;&lt;% &#125; %&gt; 增加字段 由于 date.ejs 和 updated.ejs 中分别引入了 published 和 updated 字段，因此我们需要去在语言文件中新增对应的字段，语言文件在 hiker/languages中，你博客设置成什么语言，就修改对应的语言文件，没指定就修改 default.yml 文件。这里以 default.yml 为例，打开文件，在最上面增加两行： 12published: Publishedupdated: Updated 保存退出即可。简单解释一下，格式为字段名：字段值，字段名不变，字段值可以随意更改。 修改 article.ejs 文件 新增了一个 update.ejs 文件，我们需要将它引用进去。打开 article.ejs 文件，找到第 10 行： &lt;%- partial('post/date', {class_name: 'article-date', date_format: null}) %&gt;，在下面添加一行 &lt;%- partial('post/updated', {class_name: 'article-date', date_format: null}) %&gt;，保存退出即可。 最后 执行一下 hexo g、hexo server 看看效果：","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://vanxnf.top/tags/Hexo/"},{"name":"Hiker","slug":"Hiker","permalink":"https://vanxnf.top/tags/Hiker/"},{"name":"Updated","slug":"Updated","permalink":"https://vanxnf.top/tags/Updated/"},{"name":"更新时间","slug":"更新时间","permalink":"https://vanxnf.top/tags/更新时间/"}]},{"title":"Ubuntu 18.04 LTS Putty 字体设置","slug":"Ubuntu-18-04-LTS-Putty-字体设置","date":"2018-09-02T15:47:43.000Z","updated":"2018-09-02T15:47:43.000Z","comments":true,"path":"2018/09/02/Ubuntu-18-04-LTS-Putty-字体设置/","link":"","permalink":"https://vanxnf.top/2018/09/02/Ubuntu-18-04-LTS-Putty-字体设置/","excerpt":"","text":"前言 在 Ubuntu 下 putty 的字体可以说是小得辣眼睛了，难受的不得了。接下来讲讲怎么换字体及设置字号，以及设置窗体行列数来让代码显示舒服一点。 准备工作 个人而言，比较喜欢 consola 字体，因此在网上找到了网友制作的微软雅黑 consola 混合字体，安装到系统上后准备工作就完成了。当然你可以选择你自己喜欢的字体。 更改 putty 字体 运行 putty SSH client 后，可以看到左侧有一个菜单，选择里面的 Window 下 的 Fonts 标签，可以看到如下画面： 在上面的图中，Font used for ordinary text 部分就是修改字体的地方那个了，当然，呈现的画面是我已经修改好了的结果。点击 旁边的 change... 按钮，会出来以下画面： 找不到你安装的字体的话记得把第四个勾勾上，选择好之后点 OK就行了。 更改窗体显示行列数 更改了字体及字号之后，原来的窗体就显得有些小了。点击左侧的 Window 标签，如图所示修改其中的 Columns 和 Rows 即可： 注意 修改好之后，千万要记得回到 Session 标签保存下来啊，不然下一次还要在来一遍。","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"Putty","slug":"Putty","permalink":"https://vanxnf.top/tags/Putty/"}]},{"title":"Hexo 主题同步","slug":"Hexo-主题同步","date":"2018-09-02T12:42:46.000Z","updated":"2018-09-03T11:07:32.000Z","comments":true,"path":"2018/09/02/Hexo-主题同步/","link":"","permalink":"https://vanxnf.top/2018/09/02/Hexo-主题同步/","excerpt":"写在前面，本篇解决方案针对的是以 Ubuntu 18.04 LTS GitHub Pages + Hexo 搭建博客 搭建出来的 Hexo 博客，但对一般搭建方法也有一定参考价值，具体请自行判断。 问题 由于修改hexo主题的默认设置需要使用git管理来方便备份，所以如何同步主题的设置也是一件很重要的事。 原因 Hiker的使用方法 1git clone https://github.com/iTimeTraveler/hexo-theme-hiker.git themes/hiker 这样配置完其实thems/next/就是一个包含.git/的子项目仓库。所以在push主项目的时候不会上传子项目，子项目的文件夹是灰的，并且里面是空的。所以从远程仓库拉取的项目中是没有 Hiker 主题的。","text":"写在前面，本篇解决方案针对的是以 Ubuntu 18.04 LTS GitHub Pages + Hexo 搭建博客 搭建出来的 Hexo 博客，但对一般搭建方法也有一定参考价值，具体请自行判断。 问题 由于修改hexo主题的默认设置需要使用git管理来方便备份，所以如何同步主题的设置也是一件很重要的事。 原因 Hiker的使用方法 1git clone https://github.com/iTimeTraveler/hexo-theme-hiker.git themes/hiker 这样配置完其实thems/next/就是一个包含.git/的子项目仓库。所以在push主项目的时候不会上传子项目，子项目的文件夹是灰的，并且里面是空的。所以从远程仓库拉取的项目中是没有 Hiker 主题的。 解决 使用fork + subtree来解决这个问题。 首先要 fork 一下 Hiker 这个项目，然后拉取到本地做修改，修改好后 push 到远程仓库。然后用git subtree把themes/hiker/当做子项目来统一管理。 创建 subtree 步骤 首先进入 Hexo 博客所在的目录，本例子中是 Hexo。 新建名为 themes 的分支: 1git branch themes 切换到 themes 分支: 1git checkout themes 绑定 fork 的 hiker 仓库： 1git remote add -f hiker git@github.com:username/hexo-theme-hiker.git 添加 subtree： 1git subtree add --prefix=themes/hiker hiker master 这样就把 fork 之后的 hiker 的 master 分支所有 checkout出来的文件作为一次提交加到了 Hexo 项目的 themes 分支中。 合并 themes 分支到主分支 source： 123git checkout sourcegit merge themes --squashgit commit 提交对主题配置文件的修改 123git checkout themesgit merge sourcegit subtree push --prefix=themes/hiker hiker master 这样提交之后 fork 的 hiker 主题仓库也会保持更新。 更新主题 12345git checkout themesgit subtree pull --prefix=themes/hiker hiker mastergit checkout sourcegit merge themes --squashgit commit","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://vanxnf.top/tags/Hexo/"},{"name":"主题","slug":"主题","permalink":"https://vanxnf.top/tags/主题/"}]},{"title":"一些小技巧","slug":"一些小技巧","date":"2018-09-02T04:25:35.000Z","updated":"2018-10-04T12:25:42.000Z","comments":true,"path":"2018/09/02/一些小技巧/","link":"","permalink":"https://vanxnf.top/2018/09/02/一些小技巧/","excerpt":"","text":"获取 github 中图片等文件的 raw 链接 先在 github 仓库中找到该文件，点击该文件，打开后在浏览器的 url 后面加上 ？raw=true ，并回车跳转，即可获取该文件的 raw 链接。 Hexo 博客站内文章链接 首先需要知道要链接的站内文章的 md 文件的文件名（不包含 .md），以如下形式即可形成链接，其中显示文字部分可选，不填则会自动显示该文章标题： 1&#123;% post_link 文件名 显示文字 %&#125; Hexo Hiker 主题中 about、categories、tags 页面不可用 是因为这几个页面没有生成，需要手动生成一次： 123hexo new page tagshexo new page categorieshexo new page about 还需要做一些修改 编辑 source/tags/index.md，在 date 下面一行加上一行 layout: tags 编辑 source/categories/index.md，在 date 下面一行加上 layout: categories 编辑 source/about/index.md，在 date 下面一行加上 layout: about 删除 db.json 执行 hexo clean 执行 hexo g 注意：about 页面的内容需要自己手动编写。 使生成的 Hexo post 默认带有 categories属性 编辑 scaffolds\\post.md，在里面添加一行 categories:即可。 Hexo 关闭某一篇文章的评论功能 只需要在标题下添加一行 comments: false 即可。 取消开机 在完全开机前，通过快捷键 Ctrl + Alt + Del 可取消关机。 Ubuntu Windows 双系统时间问题 Ubuntu 下依次执行下列命令即可： 123sudo apt-get install ntpdatesudo ntpdate time.windows.comsudo hwclock --localtime --systohc 另外友情提示：时间错误会导致网页加载失败，下次打不开网页记得先检查时间，不要动不动就卸网卡…","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"技巧","slug":"技巧","permalink":"https://vanxnf.top/tags/技巧/"}]},{"title":"Ubuntu 18.04 LTS 开发环境配置","slug":"Ubuntu-18-04-LTS-开发环境配置","date":"2018-09-01T12:23:24.000Z","updated":"2018-09-15T11:11:35.000Z","comments":true,"path":"2018/09/01/Ubuntu-18-04-LTS-开发环境配置/","link":"","permalink":"https://vanxnf.top/2018/09/01/Ubuntu-18-04-LTS-开发环境配置/","excerpt":"","text":"JDK 配置 方法一 手动下载安装 下载并安装 首先下载 JDK8 ，解压到 /usr/lib/jvm ，我下载的是 jdk-8u181-linux-x64.tar.gz，执行 12sudo mkdir /usr/lib/jvmsudo tar -zxvf jdk-8u181-linux-x64.tar.gz -C /usr/lib/jvm 配置环境变量 由于我使用 zsh 因此编辑的是 ~/.zshrc 文件，使用默认终端的则编辑 ~/.bashrc 文件，或者配置所有用户的环境变量编辑 /etc/profile 。 执行： 1sudo vi ~/.zshrc 在文件末尾添加： 12345#set oracle jdk environmentexport JAVA_HOME=/usr/lib/jvm/jdk1.8.0_181export JRE_HOME=$&#123;JAVA_HOME&#125;/jre**export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/libexport PATH=$&#123;JAVA_HOME&#125;/bin:$PATH 然后执行： 1source ~/.zshrc 系统设置默认 JDK 执行： 12345sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_181/bin/java 300sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_181/bin/javac 300sudo update-alternatives --install /usr/bin/jar jar /usr/lib/jvm/jdk1.8.0_181/bin/jar 300sudo update-alternatives --install /usr/bin/javah javah /usr/lib/jvm/jdk1.8.0_181/bin/javah 300sudo update-alternatives --install /usr/bin/javap javap /usr/lib/jvm/jdk1.8.0_181/bin/javap 300 然后执行: 1sudo update-alternatives --config java 若是初次安装 JDK，会有下面的提示: 12There is only one alternative in link group java (providing /usr/bin/java): /usr/lib/jvm/jdk1.8.0_181/bin/javaNothing to configure. 否则，选择合适的 JDK即可。 ### 查看java版本 查看版本检验是否安装成功： 1java -version 方法二 命令行方式安装 oracle JDK 安装依赖包 1sudo apt-get install python-software-properties 添加仓库源 1sudo add-apt-repository ppa:webupd8team/java 更新软件包列表 1sudo apt-get update 安装java JDK 1sudo apt-get install oracle-java8-installer 注意安装过程中需要接受协议 ###5. 查看java版本 1java -version 应用软件安装 Sublime Text 3 安装 参考 Sublime Text 3 的官方安装文档，按照提示即可正常安装，此处摘录 apt 安装步骤： Install the GPG key: 1wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add - Ensure apt is set up to work with https sources: 1sudo apt-get install apt-transport-https 以下按需要二选一即可 Select the channel to use: Stable 1echo &quot;deb https://download.sublimetext.com/ apt/stable/&quot; | sudo tee /etc/apt/sources.list.d/sublime-text.list Dev 1echo &quot;deb https://download.sublimetext.com/ apt/dev/&quot; | sudo tee /etc/apt/sources.list.d/sublime-text.list Update apt sources and install Sublime Text 12sudo apt-get updatesudo apt-get install sublime-text 注册码及插件请查看 Sublime Text 3 插件及注册码。 无法输入中文问题请查看 Sublime Text 3 Ubuntu 18.04 无法输入中文解决方案。 Android Studio 安装 首先从 https://developer.android.com/studio/ 下载软件压缩包。 右键解压或者使用以下命令： 1sudo unzip android-studio-ide-173.4907809-linux.zip 解压后文件夹名为 android-studio，将文件夹移动至 /opt/下 1sudo mv android-studio /opt/ 进入文件夹下 1cd /opt/android-studio/bin/ 执行以下命令即可打开 Android Studio，但是不建议这么做，因为这样打开配置文件等均存于root目录下，建议先创建快捷方式。 1sudo ./studio.sh 初次启动，将设置选择好，会下载所需的文件，需要较长时间。 创建快捷方式 Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 Android Studio 的快捷方式。 首先进入文件夹 1cd /usr/share/applications 创建快捷方式 1sudo vim android-studio.desktop 添加如下内容： 1234567891011[Desktop Entry]Name=Android StudioName[zh_CN]=Android StudioComment=Android StudioExec=/opt/android-studio/bin/studio.shIcon=/opt/android-studio/bin/studio.pngTerminal=falseType=ApplicationCategories=Application;Encoding=UTF-8StartupNotify=true 然后保存退出，执行： 1sudo chmod +x android-studio.desktop 即可从菜单栏打开 Android Studio 了。 配置 adb 环境变量（可选） 编辑 ~/.zshrc 文件（系统自带终端编辑 ~/.bashrc ，对所有用户生效编辑 /etc/profile） 1sudo vim ~/.zshrc 在下方加入以下内容（ /home/vanxnf/Android/Sdk 部分写你的 sdk 路径）： 123#set path for android sdk toolsexport PATH=$PATH:/home/vanxnf/Android/Sdk/tools/export PATH=$PATH:/home/vanxnf/Android/Sdk/platform-tools/ 然后执行以下命令即可生效。 1source ~/.zshrc PyCharm 安装 首先从 https://www.jetbrains.com/pycharm/download/#section=linux 下载软件压缩包。也可直接使用以下命令安装： 1sudo snap install [pycharm-professional|pycharm-community] --classic 这里采用下载压缩包的形式，解压并将文件夹移动到 /opt/ 下 12tar -xf pycharm-professional-2018.2.2.tar.gzsudo mv pycharm-2018.2.2 /opt/ 进入文件夹下 1cd /opt/pycharm-2018.2.2/bin 执行以下命令即可打开 PyCharm， 但不建议这么做，建议先创建快捷方式。 1sudo ./pycharm.sh 创建快捷方式 Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 PyCharm 的快捷方式。 首先进入文件夹 1cd /usr/share/applications 创建快捷方式 1sudo vim PyCharm.desktop 添加如下内容： 1234567891011[Desktop Entry]Name=PyCharmName[zh_CN]=PyCharmComment=PyCharmExec=/opt/pycharm-2018.2.2/bin/pycharm.shIcon=/opt/pycharm-2018.2.2/bin/pycharm.pngTerminal=falseType=ApplicationCategories=Application;Encoding=UTF-8StartupNotify=true 然后保存退出，执行： 1sudo chmod +x PyCharm.desktop 即可从菜单栏打开 PyCharm 了。 IntelliJ IDEA 安装 首先从 https://www.jetbrains.com/idea/download/#section=linux 下载软件压缩包。 将压缩包解压并将文件夹移动到 /opt/ 下 12tar -xf ideaIU-2018.2.2.tar.gzsudo mv idea-IU-182.4129.33 /opt 进入文件夹下 1cd /opt/idea-IU-182.4129.33/bin 执行以下命令即可打开 IDEA， 但不建议这么做，建议先创建快捷方式。 1sudo ./idea.sh 创建快捷方式 Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 IDEA 的快捷方式。 首先进入文件夹 1cd /usr/share/applications 创建快捷方式 1sudo vim IDEA.desktop 添加如下内容： 1234567891011[Desktop Entry]Name=IDEAName[zh_CN]=IDEAComment=IDEAExec=/opt/idea-IU-182.4129.33/bin/idea.shIcon=/opt/idea-IU-182.4129.33/bin/idea.pngTerminal=falseType=ApplicationCategories=Application;Encoding=UTF-8StartupNotify=true 然后保存退出，执行： 1sudo chmod +x IDEA.desktop 即可从菜单栏打开 IDEA 了。 Anaconda 安装 首先从 https://www.anaconda.com/download/#linux 下载 Anaconda。 执行以下命令安装： 1bash Anaconda3-5.2.0-Linux-x86_64.sh 因为 Anaconda 的脚本只会添加到 ~/.bashrc 下，而使用 zsh 的需要在 ~/.zshrc 下添加 12# added by Anaconda3 installerexport PATH=&quot;/home/vanxnf/anaconda3/bin:$PATH&quot; 然后执行： 1source ~/.zshrc 输入： 1python 显示类似以下内容： 1234Python 3.6.5 |Anaconda, Inc.| (default, Apr 29 2018, 16:14:56)[GCC 7.2.0] on linuxType &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.&gt;&gt;&gt; 即安装成功。 Putty 使用以下命令安装即可： 1sudo apt-get install putty 说一下 Ubuntu GNOME 环境下 putty 的复制粘贴，其实 GNOME 自带这个功能，只需要鼠标选中高亮要复制的内容，在需要粘贴的地方按鼠标中键即可。 Atom 从官网下载 https://atom.io/ ，然后使用以下命令安装： 1sudo dpkg -i atom-amd64.deb Clion 安装 首先从官网下载 https://www.jetbrains.com/clion/whatsnew/ 软件压缩包。 将压缩包解压并移动到 /opt/ 下： 12tar -xf CLion-2018.2.3.tar.gzsudo mv clion-2018.2.3 /opt/ 进入文件夹下： 1cd /opt/clion-2018.2.3/bin 执行以下命令即可打开 CLion， 但不建议这么做，建议先创建快捷方式。 1sudo ./clion.sh 创建快捷方式 Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 CLion 的快捷方式。首先进入文件夹: 1cd /usr/share/applications 创建快捷方式: 1sudo vim Clion.desktop 添加如下内容： 1234567891011[Desktop Entry]Name=CLionName[zh_CN]=ClionComment=CLionExec=/opt/clion-2018.2.3/bin/clion.shIcon=/opt/clion-2018.2.3/bin/clion.pngTerminal=falseType=ApplicationCategories=Application;Encoding=UTF-8StartupNotify=true 然后保存退出，执行： 1sudo chmod +x Clion.desktop 即可从菜单栏打开 CLion 了。 未完待续","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"开发","slug":"开发","permalink":"https://vanxnf.top/tags/开发/"}]},{"title":"Ubuntu18.04 LTS dash to dock bug解决方案","slug":"Ubuntu18-04-LTS-dash-to-dock-bug解决方案","date":"2018-09-01T12:21:27.000Z","updated":"2018-09-01T12:21:27.000Z","comments":true,"path":"2018/09/01/Ubuntu18-04-LTS-dash-to-dock-bug解决方案/","link":"","permalink":"https://vanxnf.top/2018/09/01/Ubuntu18-04-LTS-dash-to-dock-bug解决方案/","excerpt":"","text":"截至到目前dash to dock GNOME 3.28第63版依旧存在登陆界面出现dock栏的问题。 这其实是自带的dock栏导致的，在Extensions中即使关闭它也会有这个问题，输入以下命令将自带dock移动到～下，重启后即可解决此问题(也可移动到其他目录或者直接rm删除)。Ubuntu 更新后需要再执行一遍，因为更新会修复自带的 dock。 1sudo mv /usr/share/gnome-shell/extensions/ubuntu-dock@ubuntu.com ~/ 或者 1sudo rm -rf /usr/share/gnome-shell/extensions/ubuntu-dock@ubuntu.com","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"dash to dock","slug":"dash-to-dock","permalink":"https://vanxnf.top/tags/dash-to-dock/"}]},{"title":"Ubuntu 18.04 LTS 使用 Minecraft 我的世界第三方启动器 HMCL","slug":"Ubuntu-18-04-LTS-使用-Minecraft-我的世界第三方启动器-HMCL","date":"2018-09-01T12:20:17.000Z","updated":"2018-09-01T12:20:17.000Z","comments":true,"path":"2018/09/01/Ubuntu-18-04-LTS-使用-Minecraft-我的世界第三方启动器-HMCL/","link":"","permalink":"https://vanxnf.top/2018/09/01/Ubuntu-18-04-LTS-使用-Minecraft-我的世界第三方启动器-HMCL/","excerpt":"","text":"下载安装 首先在下方链接下载第三方启动器： http://www.mcbbs.net/thread-142335-1-1.html 由于是在 Ubuntu 下运行，下载 jar 版本的即可。 在将 jar 文件复制到文件夹中，这里我放置在 ~/Documents/MC 下，首先创建这个文件夹： 1mkdir ~/Documents/MC 我下载在 Downloads 文件夹下，因此将它移动到MC文件夹下去： 1sudo mv ~/Downloads/HMCL-3.1.94.jar ~/Documents/MC 此刻在MC文件夹下执行： 1java -jar HMCL-3.1.94.jar 即可运行 HMCL 启动器。 创建快捷方式 Ubuntu 在 /usr/share/applications 目录下存放着系统应用程序的快捷启动图标，我们可以在这里创建 Minecraft 的快捷方式。 首先准备一张 minecraft 的图标图片，作为快捷方式的启动图标，放置在 MC 文件夹下，再在这个文件夹下创建启动脚本： 1vim minecraft.sh 写入以下内容： 12#!bin/shcd ~/Documents/MC &amp;&amp; java -jar HMCL-3.1.94.jar 保存并退出，执行以下命令授予权限： 1sudo chmod +x minecraft.sh 前期准备工作到此完成，接下来创建快捷方式： 12cd /usr/share/applicationssudo vim minecraft.desktop 输入以下内容（注意：这里的 vanxnf 请替换成你自己的登录名，存放路径不同的修改成自己的路径）： 1234567891011[Desktop Entry]Name=MinecraftName[zh_CN]=MinecraftComment=Minecraft HMCLExec=sh /home/vanxnf/Documents/MC/minecraft.shIcon=/home/vanxnf/Documents/MC/minecraft.pngTerminal=falseType=ApplicationCategories=Application;Encoding=UTF-8StartupNotify=true 保存退出，执行以下命令授予权限： 1sudo chmod +x minecraft.desktop 此时在菜单栏中已经可以找到 Minecraft 的启动图标了，双击即可启动。以这种方式启动，将不再出现终端窗口。 注意 另外，我测试发现，以下两种终端启动方式，读取的配置文件不共享： 第一种： 1java -jar ~/Documents/MC/HMCL-3.1.94.jar 第二种： 1cd ~/Documents/MC &amp;&amp; java -jar HMCL-3.1.94.jar 因此，认准一种启动，设置好后，之后都要使用相同的启动方式才能读取配置。 我设置时使用的是第二种，方便起见，使用 alias 快捷启动，由于我使用的是zsh，执行 (默认终端 应编辑 ~/.bashrc)： 1sudo vim ~/.zshrc 在最下方加上，并保存退出。 12#Minecraft**alias MC=&apos;cd ~/Documents/MC &amp;&amp; java -jar HMCL-3.1.94.jar&apos; 最后执行即可（编辑 bashrc 的 source ~/.bashrc 即可） 1source ~/.zshrc 以后启动时，只需要在终端输入 1MC 即可运行。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"Minecraft","slug":"Minecraft","permalink":"https://vanxnf.top/tags/Minecraft/"},{"name":"HMCL","slug":"HMCL","permalink":"https://vanxnf.top/tags/HMCL/"}]},{"title":"Ubuntu 18.04 LTS QQ、微信解决方案","slug":"Ubuntu-18-04-LTS-QQ、微信解决方案","date":"2018-09-01T12:19:00.000Z","updated":"2018-09-01T12:19:00.000Z","comments":true,"path":"2018/09/01/Ubuntu-18-04-LTS-QQ、微信解决方案/","link":"","permalink":"https://vanxnf.top/2018/09/01/Ubuntu-18-04-LTS-QQ、微信解决方案/","excerpt":"","text":"#Deepin-wine 环境安装 首先安装deepin-wine环境：https://gitee.com/wszqkzqk/deepin-wine-for-ubuntu 下载zip包（或用git方式克隆），解压到本地文件夹，在文件夹中打开终端，切换到 root 账户，输入： 1sh ./install.sh 安装应用容器 然后安装 deepin.com 应用容器，在 http://mirrors.aliyun.com/deepin/pool/non-free/d/ 中下载想要的容器，**建议在终端下使用dpkg -i安装容器，**双击 deb 安装也可。以下为推荐容器: QQ：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im/ TIM：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.office/ QQ轻聊版：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.qq.im.light/ 微信：http://mirrors.aliyun.com/deepin/pool/non-free/d/deepin.com.wechat/ 托盘图标 在 Ubuntu 18.04 LTS 中，应用的托盘图标依赖于 GNOME 插件 TopIconPlus，可以在 Ubuntu 商店直接安装 TopIconPlus 的 gnome-shell 扩展，也可以使用命令安装： 1sudo apt-get install gnome-shell-extension-top-icons-plus gnome-tweaks 然后用gnome-tweaks开启这个扩展即可。","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"QQ","slug":"QQ","permalink":"https://vanxnf.top/tags/QQ/"},{"name":"微信","slug":"微信","permalink":"https://vanxnf.top/tags/微信/"}]},{"title":"机械革命 X6Ti-M2 安装 Ubuntu1804 LTS 注意事项","slug":"机械革命X6Ti-M2-安装-Ubuntu1804-LTS-注意事项","date":"2018-09-01T12:11:23.000Z","updated":"2018-09-01T12:11:23.000Z","comments":true,"path":"2018/09/01/机械革命X6Ti-M2-安装-Ubuntu1804-LTS-注意事项/","link":"","permalink":"https://vanxnf.top/2018/09/01/机械革命X6Ti-M2-安装-Ubuntu1804-LTS-注意事项/","excerpt":"","text":"这台机械革命买来有日子了，最初的时候网上教程不全，安装 Ubuntu 总是卡开机画面，现在教程也有一些了，但还是打算稍微记一下关键步骤，方便以后安装。 一 此电脑安装 Ubuntu 时，需要禁用 acpi 才能进入。 Ubuntu 安装界面通过键盘定位到 Install…… 选项，然后按 e 键进入编辑模式。 找到 — 之后输入一个空格后，再输入 acpi=off ，按 F10 键，加载新的启动参数，启动 Ubuntu 的安装界面。 这时可以正常安装了。 安装完重启卡开机，可以使用同样的操作。不过我安装完重启的时候没有遇到卡开机的问题。 二 安装完成后，安装一下独显的驱动。 安装完成后，修改grub， 输入 1sudo vim /etc/default/grub 将 GRUB_CMDLINE_LINUX=“acpi=off” 中的 acpi=off 去掉，保存退出。 然后执行： 1sudo update-grub 此时系统的睡眠、开关机都正常了。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"机械革命","slug":"机械革命","permalink":"https://vanxnf.top/tags/机械革命/"},{"name":"X6Ti-M2","slug":"X6Ti-M2","permalink":"https://vanxnf.top/tags/X6Ti-M2/"}]},{"title":"ASUS S200E Ubuntu 18.04 开机启动键盘映射","slug":"ASUS-S200E-Ubuntu-18-04-开机启动键盘映射","date":"2018-09-01T12:08:45.000Z","updated":"2018-09-01T12:08:45.000Z","comments":true,"path":"2018/09/01/ASUS-S200E-Ubuntu-18-04-开机启动键盘映射/","link":"","permalink":"https://vanxnf.top/2018/09/01/ASUS-S200E-Ubuntu-18-04-开机启动键盘映射/","excerpt":"","text":"设置键盘映射 老笔电 S200E 跑 Win10 有点吃力了，键盘上 Caps Lock 与左 Shift 键又坏了。趁着假期在家，在X宝上买了配套的键盘换上了（第一次拆超极本，真的费劲），又安装了一下 Ubuntu 18.04 LTS，重获新生啊有没有。 但是当我安装好Ubuntu，简单美化后，居然发现这款电脑键盘右上角有个专门的功能键？？？功能键就功能键吧，这时才发现X宝上买来换上的键盘右上角这颗功能键键帽印了 “insert” ？？？这怎么能忍，最关键的是这颗键在 Ubuntu 上就是个摆设： 终端下输入 1xev 或者 1xev | grep keycode 会弹出图形窗口，此时按键盘即可查看对应键信息。一看keycode 248 keysym空 ？？？ 于是 Plan A 走起，然而事情并不简单，扣下旧键帽一看内部搭扣结构，果然和新的不一样，因吹斯听，换键帽路线 OVER；那就只能 Plan B了，本来键帽正确键闲着也就闲着好了，然而它印了 insert 那一切就不一样了，这是要逼死强迫症啊，然而作者算是Linux初级用户，没法自己想出解决方案，于是开始百度谷歌键盘映射，还真给我找到了，这里记录亲身测试过的一种（也是对我这种情况最简单的一种） 首先用上述指令获取想修改的键的keycode，以及目标键的键值（keysym） 之后，就在 “~” 目录下创建 .xmodmaprc（在别的目录下也行啦）文件 1sudo vim ～/.xmodmaprc 输入内容如下（248是我这颗空闲的功能键的 keycode，而 0xff63 则是键帽上的 insert 对应的 keysym） 1keycode 248 = 0xff63 0xff63 保存之后，在终端输入 1xmodmap ~/.xmodmaprc 即可直接生效。 设置开机启动 但是每次开机后要重新执行一次，很麻烦对不对。于是想到了开机自动执行脚本，然而作者真的菜，搜遍搜索引擎，从 rc.local 到 systemd 全都失败了，看其他大佬的评论大概是xmodmap依赖于x桌面，没加载好前是执行不了的，然而还是没法解决。前前后后试了一天，都要放弃了，终于在个小论坛里看到个方案，尝试了一下真的成功了。 Ubuntu 自带一个 Startup Applications Preferences 点击 add，name可以随便写，command中填 1/bin/bash -c &quot;sleep 30; /usr/bin/xmodmap ~/.xmodmaprc&quot; Comment也可以随意填写，上面的代码里后面的是文件路径。 重启后终于成功了。 完结撒花。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"ASUS","slug":"ASUS","permalink":"https://vanxnf.top/tags/ASUS/"},{"name":"S200E","slug":"S200E","permalink":"https://vanxnf.top/tags/S200E/"},{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"开机启动","slug":"开机启动","permalink":"https://vanxnf.top/tags/开机启动/"},{"name":"键盘映射","slug":"键盘映射","permalink":"https://vanxnf.top/tags/键盘映射/"}]},{"title":"Ubuntu 1804 蓝牙鼠标连接失败问题解决 Bluetooth Mouse Won't Connect after Reboot","slug":"Ubuntu-1804-蓝牙鼠标连接失败问题解决-Bluetooth-Mouse-Won-t-Connect-after-Reboot","date":"2018-09-01T12:04:05.000Z","updated":"2018-09-01T12:04:05.000Z","comments":true,"path":"2018/09/01/Ubuntu-1804-蓝牙鼠标连接失败问题解决-Bluetooth-Mouse-Won-t-Connect-after-Reboot/","link":"","permalink":"https://vanxnf.top/2018/09/01/Ubuntu-1804-蓝牙鼠标连接失败问题解决-Bluetooth-Mouse-Won-t-Connect-after-Reboot/","excerpt":"","text":"方案主要参考自 Ubuntu Forums 首先 终端下输入 1bluetoothctl 然后输入 1list 看清楚 Controller 的 mac 地址，我的是 AC:2B:6E:91:65:4E ，在终端输入 1select AC:2B:6E:91:65:4E 然后输入 1show 此时确保你的鼠标配对已打开，处于可被发现状态，输入 1scan on 在输出信息中找到你的鼠标后，即可输入 1scan off 并记下你鼠标的mac地址，如果你的鼠标连接时要求 pin code，则输入以下命令，若不用则跳过这一条（当然不确定的话需不需要 pin code 就执行一下，也没什么影响的）。 1agent on 接下来使用上一条记下的鼠标mac地址， 输入 1pair DC:2C:26:AE:35:41 出现 Pairing successful，即配对成功，中间要求 pin code, 就输入对应 pin code即可。这时配对成功，但是鼠标还不能操作，依次输入 12connect DC:2C:26:AE:35:41trust DC:2C:26:AE:35:41 鼠标即可正常使用了。 Windows 10 和 Ubuntu 18.04 LTS 双系统蓝牙鼠标连接问题的解决方案","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"蓝牙鼠标","slug":"蓝牙鼠标","permalink":"https://vanxnf.top/tags/蓝牙鼠标/"},{"name":"Bluetooth Mouse","slug":"Bluetooth-Mouse","permalink":"https://vanxnf.top/tags/Bluetooth-Mouse/"}]},{"title":"Windows 10 和 Ubuntu 18.04 LTS 双系统蓝牙鼠标连接问题的解决方案","slug":"Windows-10-和-Ubuntu-18-04-LTS-双系统蓝牙鼠标连接问题的解决方案","date":"2018-09-01T11:57:17.000Z","updated":"2018-09-01T11:57:17.000Z","comments":true,"path":"2018/09/01/Windows-10-和-Ubuntu-18-04-LTS-双系统蓝牙鼠标连接问题的解决方案/","link":"","permalink":"https://vanxnf.top/2018/09/01/Windows-10-和-Ubuntu-18-04-LTS-双系统蓝牙鼠标连接问题的解决方案/","excerpt":"","text":"笔记本安装了双系统，蓝牙鼠标连接一个系统之后重启到另一个系统就需要把鼠标删掉重新连接，十分麻烦。本文旨在为这个问题提供可行的解决方案。主要参考自 CSDN。 第一步 首先在 Windows 10 下连上蓝牙鼠标，目的是留下连接记录，方便之后来修改连接值。 第二步 在Ubuntu 18.04 LTS 中连上蓝牙鼠标，鼠标连不上的看 Ubuntu 1804 蓝牙鼠标连接失败问题解决 Bluetooth Mouse Won’t Connect after Reboot 第三步 获取 Ubuntu 18.04 LTS下的蓝牙配对 linkkey 值。 首先切换到 root 账户： 1su 然后执行 1cd /var/lib/bluetooth/ 执行（两个小写的L），获得电脑的蓝牙地址。 1ll cd 这个地址，再次执行 ll，获得鼠标的蓝牙地址。 1ll cd 鼠标的蓝牙地址，并执行： 1cat info 找到 [LinkKey]，记下这个值 1Key=966B5BDD8EAECD793FC26700B8A6B337 第四步 回到 Windows 10 系统，此时蓝牙鼠标自动连接上了（之前有连接记录），但是不能操控。 别急，首先到微软官网下载 PSTools 工具，下载完成后解压到文件夹即可，在文件夹内以管理员身份运行 cmd，执行： 1PsExec.exe -s -i regedit 找到 HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\BTHPORT\\Parameters\\Keys\\ 下的文件夹，正常情况下是以电脑 mac 地址命名的，找到文件夹内的以蓝牙鼠标 mac 地址命名的文件，修改它的值为之前第三步获取的 key 的值即可。 第五步 重启电脑，这时无论是进 Ubuntu， 还是进 Windows，都能正常使用了。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"蓝牙鼠标","slug":"蓝牙鼠标","permalink":"https://vanxnf.top/tags/蓝牙鼠标/"},{"name":"Bluetooth Mouse","slug":"Bluetooth-Mouse","permalink":"https://vanxnf.top/tags/Bluetooth-Mouse/"},{"name":"Windows 10","slug":"Windows-10","permalink":"https://vanxnf.top/tags/Windows-10/"},{"name":"鼠标","slug":"鼠标","permalink":"https://vanxnf.top/tags/鼠标/"}]},{"title":"Ubuntu 18.04 LTS 美化记录","slug":"Ubuntu-18-04-LTS-美化记录","date":"2018-09-01T11:35:22.000Z","updated":"2018-09-08T07:13:05.000Z","comments":true,"path":"2018/09/01/Ubuntu-18-04-LTS-美化记录/","link":"","permalink":"https://vanxnf.top/2018/09/01/Ubuntu-18-04-LTS-美化记录/","excerpt":"","text":"Grub2 美化 在 https://www.gnome-look.org/browse/cat/109/ 选择一款合适自己的主题安装，具体操作参照文件介绍即可。 我使用的是 Grub-theme-vimix 这款，背景图片可以自己替换，修改过之后文件名不同的话记得在 Vimix 文件夹下的 theme.txt 中对应修改。 默认安装的话： 12cd ~/Downloads/grub-theme-vimixsudo ./Install 注意：安装主题后记得在 /etc/default/grub 中找到 GRUB_GFXMODE这一行，然后删去最前面的 # 将后面的分辨率改成自己的就可以了。结果如下： 1GRUB_GFXMODE=1920x1080 主题美化 Ubuntu采用了GNOME，因此要美化主题，首先需要安装 gnome-tweak-tool 。 12sudo apt-get updatesudo apt-get install gnome-tweak-tool 接下来，需要安装 User themes 才能启用第三方主题，直接从 Ubuntu 自带商店中搜索安装即可。 安装完成后，就可以设置主题了。推荐两款主题 对于想仿 mac 美化的，推荐 macOS High Sierra 这款主题，点击即可访问，选择 File 下载到本地，解压一下丢到 ~/.themes 下重新打开 Tweak Tool 即可看到， 它有配套的 cursor 和 icon ，解压后丢到 ~/.icons 下即可，字体解压后直接安装或者丢到 ~/.fonts 下。 对于扁平化主题，推荐 Vimix-Gtk-Theme 这款主题，点击即可访问下载，详细安装方法参见主题的介绍页，或者到该主题的 github 主页，有中文安装说明。如果都不喜欢，那就到 https://www.opendesktop.org/s/Gnome 去自己探索一下。 个人比较喜欢 Vimix-Dark-Laptop-Doder ，整体效果如下 登录界面美化 Ubuntu 自带的登录界面万年纯色背景不是很喜欢，也有直接替换背景图片的办法，这里我就偷个懒，用别人写好的代码，访问 High Ubunterra 下载它准备好的文件，解压后有如下几个文件： 在文件夹中打开终端，或者 cd 到此文件夹下都行，执行： 12sudo chmod +x install.shsudo ./install.sh 然后换上你想放到登录页的壁纸，对图片右键，选 Set As Wallpaper 就行，然后执行： 1sudo ./SetAsWallpaper Picture文件夹下会出现一张名为 **gdmlock.jpg **的图片，Tweak Tool 中 Appearance 下 Lock Screen 设为这张图就行了。 终端美化 安装 zsh 和 oh-my-zsh 终端选用 zsh ，首先执行： 1sudo apt-get install zsh 接下来我们需要下载 oh-my-zsh 项目来帮我们配置 zsh，采用wget安装 1sh -c &quot;$(wget[https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh](https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)-O -)&quot; 安装插件 语法高亮 安装语法高亮插件 highlight： 12cd ~/.oh-my-zsh/custom/plugins &amp;&amp;\\git clone git://github.com/zsh-users/zsh-syntax-highlighting.git 在Oh-my-zsh的配置文件中 ~/.zshrc 中添加插件： 1plugins=( [plugins...], zsh-syntax-highlighting) 重新打开终端即可生效。 自动补全 1git clone git://github.com/zsh-users/zsh-autosuggestions$ZSH_CUSTOM/plugins/zsh-autosuggestions 在 ~/.zshrc 中添加： 1plugins=( [plugins...], zsh-autosuggestions) 重新打开终端即可生效。 设置 zsh 主题 编辑 ~/.zshrc ，找到ZSH_THEME修改为你想要的主题即可。 agnoster这款主题不错，但配套使用需要先安装一下配套字体 Powerline： 123git clone git@github.com:powerline/fonts.gitcd fontssudo ./install.sh 在设置中启用第三方字体即可： 其他操作 编辑 ~/.zshrc，在最下方添加，: 1DEFAULT_USER=$USER 保存退出即可。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"美化","slug":"美化","permalink":"https://vanxnf.top/tags/美化/"}]},{"title":"Sublime Text 3 配置 python3 编译环境（Ubuntu 18.04 LTS）","slug":"Sublime-Text-3-配置-python3-编译环境（Ubuntu-18-04-LTS）","date":"2018-09-01T11:33:40.000Z","updated":"2018-09-01T11:33:40.000Z","comments":true,"path":"2018/09/01/Sublime-Text-3-配置-python3-编译环境（Ubuntu-18-04-LTS）/","link":"","permalink":"https://vanxnf.top/2018/09/01/Sublime-Text-3-配置-python3-编译环境（Ubuntu-18-04-LTS）/","excerpt":"","text":"获取 python3 路径 在终端下输入 1which python3 即可显示 python3 所在路径，记下这个路径。 新建编译配置文件 打开 sublime text 3，点击上部菜单栏 Tools-&gt;Build System-&gt;new Build System 清空新打开的模板，输入以下代码（ /usr/bin/python3 为第一步得到的路径）： 12345&#123; &quot;cmd&quot;: [&quot;/usr/bin/python3&quot;, &quot;-u&quot;, &quot;$file&quot;], &quot;file_regex&quot;: &quot;^[ ]*File \\&quot;(...*?)\\&quot;, line ([0-9]*)&quot;, &quot;selector&quot;: &quot;source.python&quot; &#125; 保存即可。 选择编译配置文件 点击上部菜单栏 Tools-&gt;Build System ，选择刚才保存的文件即可。","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"Sublime Text 3","slug":"Sublime-Text-3","permalink":"https://vanxnf.top/tags/Sublime-Text-3/"},{"name":"python","slug":"python","permalink":"https://vanxnf.top/tags/python/"}]},{"title":"Sublime Text 3 插件及注册码","slug":"Sublime-Text-3-插件及注册码","date":"2018-09-01T11:31:35.000Z","updated":"2018-09-01T11:31:35.000Z","comments":true,"path":"2018/09/01/Sublime-Text-3-插件及注册码/","link":"","permalink":"https://vanxnf.top/2018/09/01/Sublime-Text-3-插件及注册码/","excerpt":"","text":"Sublime Text 3 注册码及破解 破解方案一 退出 sublime， 在终端输入以下代码: 1printf&apos;\\x00\\01&apos;| sudo dd seek=$((0xD538)) conv=notrunc bs=1of=/opt/sublime_text/sublime_text 然后编辑 hosts 文件： 1vim /etc/hosts 在最下方加入: 10.0.0.0 license.sublimehq.com 重新打开 sublime 即可。 破解方案二 输入以下注册码： 12345678910111213----- BEGIN LICENSE -----sgbteamSingle User LicenseEA7E-11532598891CBB9 F1513E4F 1A3405C1 A865D53F115F202E 7B91AB2D 0D2A40ED 352B269B76E84F0B CD69BFC7 59F2DFEF E267328F215652A3 E88F9D8F 4C38E3BA 5B2DAAE4969624E7 DC9CD4D5 717FB40C 1B9738CF20B3C4F1 E917B5B3 87C38D9C ACCE7DD85F7EF854 86B9743C FADC04AA FB0DA5C0F913BE58 42FEA319 F954EFDD AE881E0B------ END LICENSE ------ 插件推荐 首先安装 Package Control 组件：按 Ctrl+ ` (此符号为 tab 按键上面的按键) 调出 console（注：避免热键冲突）到命令行执行以下代码： 1import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read()) Emmet（原名 Zen Coding） 一种快速编写 html/css 的方法 html5 支持 hmtl5 规范的插件包 注意：与 Emmet 插件配合使用，效果更好 使用方法：新建 html 文档&gt;输入 html5 &gt;敲击 Tab 键&gt;自动补全 html5 规范文档 jQuery 支持 JQuery 规范的插件包 javascript-API-Completions 支持 Javascript、JQuery、Twitter Bootstrap 框架、HTML5 标签属性提示的插件，是少数支持sublime text 3 的后缀提示的插件，HTML5 标签提示 sublime text 3 自带，不过 JQuery 提示还是很有用处的，也可设置要提示的语言。 安装方法（请阅读链接详情）：http://www.ithao123.cn/content-10545789.html JSFormat JS 代码格式化插件。 使用方法：使用快捷键 ctrl+alt+f SublimeLinter 一个支持 lint 语法的插件，可以高亮 linter 认为有错误的代码行，也支持高亮一些特别的注释，比如 “TODO”，这样就可以被快速定位。（IntelliJ IDEA 的 TODO 功能很赞，这个插件虽然比不上，但是也够用了吧） BracketHighlighter 类似于代码匹配，可以匹配括号，引号等符号内的范围。 使用方法：系统默认为白色高亮，可以使用链接所述方法进行自定义配置 http://www.360doc.com/content/14/1111/15/15077656_424301780.shtml Alignment 代码对齐，如写几个变量，选中这几行，Ctrl+Alt+A，哇，齐了。 Ctags 函数跳转，我的电脑上是 Alt+点击 函数名称，会跳转到相应的函数 Doc​Blockr 注释插件，生成优美的注释。标准的注释，包括函数名、参数、返回值等，并以多行显示，省去手动编写。 使用方法见：http://www.cnblogs.com/huangtailang/p/4499988.html SideBarEnhancements 侧栏右键功能增强，非常实用 主题 Boxy （ihodev/sublime-boxy） Boxy（The most hackable theme for Sublime Text 3）自带多种主题风格，可以融合 ihodev/sublime-file-icons，切换主题风格不必改配置。安装方法： 1. install package -&gt; Boxy Theme 2. install package -&gt; A File Icon","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Sublime Text 3","slug":"Sublime-Text-3","permalink":"https://vanxnf.top/tags/Sublime-Text-3/"},{"name":"注册码","slug":"注册码","permalink":"https://vanxnf.top/tags/注册码/"}]},{"title":"Ubuntu 18.04 LTS 常用软件","slug":"Ubuntu-18-04-LTS-常用软件","date":"2018-09-01T11:27:02.000Z","updated":"2018-09-26T13:29:19.000Z","comments":true,"path":"2018/09/01/Ubuntu-18-04-LTS-常用软件/","link":"","permalink":"https://vanxnf.top/2018/09/01/Ubuntu-18-04-LTS-常用软件/","excerpt":"","text":"网易云音乐 首先从 https://music.163.com/#/download 下载最新版本。然后使用以下命令安装： 1sudo dpkg -i netease-cloud-music_1.1.0_amd64_ubuntu16.04.deb 安装完成后发现桌面图标打不开面板，搜索发现两个有效的解决方案，第二种方案揭示了问题的本质，~~但目前对于 gnome-shell，第二种方案需要另写一个脚本来运行，并且存在每次启动都是全新启动，无法读取之前设置的问题。~~推荐使用第二种方案。 Ubuntu 18.04 网易云音乐无法打开最简单解决办法 Ubuntu 18.04 装了网易云音乐，难道只能用 sudo 启动吗？ - Fancy的回答 - 知乎 如果遇到无法保存配置的问题，以下是解决方案： 在 Home 目录下搜索 netease-cloud-music 可以发现在 home 下的 .cache 和 .config 下都存在这个文件夹，对于 .cache 下的文件夹直接删除，对于 .config 下的文件夹，需要改变所有者，执行以下命令： 123cd ~/.configsudo chown -R vanxnf netease-cloud-musicsudo chown -R vanxnf:vanxnf netease-cloud-music 修改文件夹权限如下： 文件夹内三个文件的权限均设置成如下图所示： 画图 draw.io 这严格来说并不是一款软件，而是一款Chrome的插件,能够添加到桌面。非常好用、易用，可以满足大部分画图功能。进网页后选择帮助-&gt;Download draw.io Desktop...下载后使用以下命令安装即可： 1sudo dpkg -i draw.io-amd64-8.8.0.deb 图片处理 GIMP 在 Ubuntu Software 中搜索即可安装。 视频播放器 SMPlayer 执行以下命令安装： 1sudo apt-get install smplayer 拼音 谷歌拼音 打字确实是搜狗拼音舒服一点，但是搜狗拼音时不时的会出现候选词乱码问题。网络上的解决方案都治标不治本，因此还是主要用谷歌拼音了。 执行以下命令安装谷歌拼音： 1sudo apt-get install fcitx-googlepinyin system setting-&gt; Language Support 中 Keyboard input method system 选择 fcitx。重启后在 Fcitx Config Tool 中启动谷歌拼音即可。 截图工具 Shutter 执行以下命令安装： 123sudo add-apt-repository ppa:shutter/ppasudo apt-get updatesudo apt-get install shutter 在 Settings -&gt; Devices -&gt; Keyboard 中的 Custom Shortcuts 中添加： 选中后按 Enter 确认即可。 办公套件 WPS 首先从 http://community.wps.cn/download/ 官网下载最新版文件。执行命令安装： 1sudo dpkg -i wps-office_10.1.0.6634_amd64.deb 修复缺失字体问题 下载文件并解压 百度云 继续执行命令 将得到文件解压进一个文件夹内，进入这个文件夹，将里面的字体文件都复制到 /usr/share/fonts 下： 1sudo cp * /usr/share/fonts 生成字体的索引信息 12sudo mkfontscalesudo mkfontdir 更新字体缓存 1sudo fc-cache 解压 unrar 首先执行以下命令安装： 1sudo apt-get install unrar 这个网上教程很多，但很遗憾，一开始那位写错了，后面的都抄错了。最常用命令是： 1unrar x xxx.rar 这样可以保持压缩包文件目录结构解压出来。 PDF 阅读器 okular 执行以下命令安装： 1sudo apt-get install okular","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"}]},{"title":"Ubuntu 18.04 LTS GitHub Pages + Hexo 搭建博客","slug":"Ubuntu-18.04-LTS-GitHub-Pages-Hexo-搭建博客","date":"2018-09-01T10:04:05.000Z","updated":"2018-09-01T10:04:05.000Z","comments":true,"path":"2018/09/01/Ubuntu-18.04-LTS-GitHub-Pages-Hexo-搭建博客/","link":"","permalink":"https://vanxnf.top/2018/09/01/Ubuntu-18.04-LTS-GitHub-Pages-Hexo-搭建博客/","excerpt":"","text":"前言 这是一篇在 Ubuntu 18.04 LTS 中使用 GitHub Pages 和 Hexo 搭建免费独立博客的总结。我有自己的服务器，出于某种需要，我用我的服务器反代了 GitHub Pages, 将会使用自己的域名访问 GitHub Pages 上的博客。同时，为了在多台电脑上都可以更新博客，采用两个分支的方式来存放文件，master 分支存放 Hexo 渲染出来的文件， 新建的分支存放源文件。 必要配置 GitHub Pages 仓库 创建对应仓库 在自己的 GitHub 账号下创建一个新的仓库，命名为 username.github.io（username是你的账号名)。 在这里，要知道，GitHub Pages 有两种类型：User/Organization Pages 和 Project Pages，而我所使用的是 User Pages。 简单来说，User Pages 与 Project Pages 的区别是： User Pages 是用来展示用户的，而 Project Pages 是用来展示项目的。 用于存放 User Pages 的仓库必须使用 username.github.io 的命名规则，而 Project Pages 则没有特殊的要求。 User Pages 将使用仓库的 master 分支，而 Project Pages 将使用 gh-pages 分支。 User Pages 通过 http(s)://username.github.io 进行访问，而 Projects Pages 通过 http(s)://username.github.io/projectname 进行访问。 相关资料 GitHub Pages Basics / User, Organization, and Project Pages Git 安装 Git 1sudo apt-get install git 配置 Git 当安装完 Git 应该做的第一件事情就是设置用户名称和邮件地址。这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入你的每一次提交中，不可更改： 12git config --global user.name \"username\"git config --global user.email \"username@example.com\" 对于 user.email，因为在 GitHub 的 commits 信息上是可见的，所以如果你不想让人知道你的 email，可以 Keeping your email address private: 在GitHub右上方点击你的头像，选择Settings； 在右边的Personal settings侧边栏选择Emails； 选择Keep my email address private。 这样，你就可以使用如下格式的 email 进行配置： 1$ git config --global user.email \"username@users.noreply.github.com\" 相关资料 安装 Git 配置 Git Setting your email in Git Keeping your email address private Git 与 GitHub 与github建立联系 为了能够在本地使用 git 管理 github 上的项目，需要进行一些配置，这里介绍 SSH 的方法。 检查电脑是否已经有 SSH keys。 12ls ~/.ssh# Lists the files in your .ssh directory, if they exist 默认情况下，public keys 的文件名是以下的格式之一：id_dsa.pub、id_ecdsa.pub、id_ed25519.pub、id_rsa.pub。因此，如果列出的文件有 public 和 private 钥匙对（例如id_ras.pub和id_rsa），证明已存在 SSH keys。 如果没有 SSH key，则生成新的 SSH key。 12ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"# Creates a new ssh key, using the provided email as a label 之后一路回车即可。 向 ssh-agent 添加 key。 首先确保 ssh-agent 可运行： 12# start the ssh-agent in the backgroundssh-agent -s 然后添加 SSH key： 1ssh-add ~/.ssh/id_rsa 在 GitHub 添加 SSH key。 首先，拷贝 key： 12sudo cat ~/.ssh/id_rsa.pub# Copies the contents of the id_rsa.pub file to your cllipboard 然后，在 GitHub 右上方点击头像，选择Settings，在右边的Personal settings侧边栏选择SSH Keys。接着粘贴 key，点击Add key按钮。最后，测试链接： 12ssh -T git@github.com# Attempts to ssh to GitHub 如果你看到： 123The authenticity of host 'github.com (207.97.227.239)' can't be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)? 就键入：yes。之后将会看到如下信息： 12Hi username! You've successfully authenticated, but GitHub does notprovide shell access. 相关资料 Generating SSH keys Hexo 具体安装方法及主题配置请查看：Ubuntu 18.04 LTS 配置 Hexo 搭建方法 在上面，我们已经配置好了所需的前置条件，也了解了 Hexo 博客搭建方法。现在，需要使用 GitHub Pages 搭建一个别人能够访问的 Hexo 博客了。 创建仓库 创建一个名为username.github.io的仓库。 搭建 hexo 博客 并创建两个分支：master 与 source 首先建立 hexo 博客 123456mkdir ~/Documents/Hexocd ~/Documents/Hexosudo npm install -g hexo-clihexo initsudo npm installsudo npm install hexo-deployer-git 创建 source 分支，并使其为默认分支： 12345678910git initgit remote add origin git@github.com:username/username.github.io.gitgit add .#添加修改git commit -m \"init hexo\"#初次提交git checkout -b source#建立分支 hexo 并切换到分支 hexogit push -u origin source#将分支 hexo 提交到 github 创建 空白分支 master 123456789101112131415161718192021cd ..#退回上一级目录mkdir new#创建一个新的文件夹用以创建空白分支cd ~/Documents/newgit inittouch README.md#随意创建一个文件，用于提交分支git add .git commit -m \"new branch\"git remote add origin git@github.com:username/username.github.io.gitgit push origin master#将分支 master 提交到 githubrm README.mdgit add .git commit -m \"clear new branch\"git push origin mastercd ~/Documents/rm -rf newcd Hexogit pull 执行完成之后，该仓库的默认分支被设为 source，同时还有空白的 master 分支用于存放网页。 设置域名 在 username.github.io 仓库首页选择Settings，向下拉，在GitHub Pages部分的Custom domain中填上自己的域名，点击save保存。此操作会在 master 分支下生成一个 CNAME 文件，里面就是刚填写的域名。 配置 hexo 提交方式 编辑该文件夹下的_config.yml的deploy参数，分支应为 master。 默认生成的_config.yml： 1234# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy: type: 修改后的_config.yml： 1234deploy: type: git repo: 对应仓库的SSH地址（可以在 GitHub 对应的仓库中复制） branch: 分支（User Pages 为 master，Project Pages 为 gh-pages） 修改博客及部署操作 修改博客内容后依次执行以下命令来提交网站相关的文件： 123git add .git commit -m \"自定义内容即可\"git push origin source 然后执行以下任意一条生成网站并部署到 GitHub 上。 1hexo generate -d 1hexo g -d 这样一来，在 GitHub 上的 username.github.io 仓库就有两个分支，一个 source 分支用来存放网站的原始文件，一个 master 分支用来存放生成的静态网页。 域名重置问题及解决方案 问题 每次执行完hexo g -d之后，github 仓库设置中的 Custom domain总是被重置，导致域名访问出现 404 错误。 解决方案 在 Hexo 生成的博客的 source 目录下新建一个 CNAME 文件，里面填上自己的域名即可。 博客管理 博客管理流程 日常修改 在本地对博客进行修改（添加新博文、修改样式等等）后，通过下面的流程进行管理： 依次执行git add .、git commit -m &quot;...&quot;、git push origin source指令将改动推送到 GitHub（此时当前分支应为 source）； 然后才执行 hexo g -d 或 hexo generate -d 发布网站到 master 分支上。 本地资料丢失 当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤： 使用 git clone git@github.com:username/username.github.io.git 拷贝仓库（默认分支为 source）； 在本地新拷贝的username.github.io文件夹下通过终端依次执行下列指令：sudo npm install -g hexo-cli、sudo npm install、sudo npm install hexo-deployer-git","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"Hexo","slug":"Hexo","permalink":"https://vanxnf.top/tags/Hexo/"},{"name":"Git","slug":"Git","permalink":"https://vanxnf.top/tags/Git/"},{"name":"静态独立博客","slug":"静态独立博客","permalink":"https://vanxnf.top/tags/静态独立博客/"},{"name":"GitHub Page","slug":"GitHub-Page","permalink":"https://vanxnf.top/tags/GitHub-Page/"}]},{"title":"在添加仓库 add-apt-repository 或者更新 apt update命令显示错误","slug":"在添加仓库-add-apt-repository-或者更新-apt-update命令显示错误","date":"2018-09-01T08:47:37.000Z","updated":"2018-09-01T08:47:37.000Z","comments":true,"path":"2018/09/01/在添加仓库-add-apt-repository-或者更新-apt-update命令显示错误/","link":"","permalink":"https://vanxnf.top/2018/09/01/在添加仓库-add-apt-repository-或者更新-apt-update命令显示错误/","excerpt":"","text":"类似以下错误： 添加的仓库保存在 /etc/apt/sources.list.d目录下。删除对应的错误仓库文件即可。 12cd /etc/apt/sources.list.dsudo rm 对应仓库 重新执行原操作即可。","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"apt update","slug":"apt-update","permalink":"https://vanxnf.top/tags/apt-update/"}]},{"title":"Sublime Text 3 Ubuntu 18.04 无法输入中文解决方案","slug":"Sublime-Text-3-Ubuntu-18-04-无法输入中文解决方案","date":"2018-09-01T08:26:09.000Z","updated":"2018-09-01T08:26:09.000Z","comments":true,"path":"2018/09/01/Sublime-Text-3-Ubuntu-18-04-无法输入中文解决方案/","link":"","permalink":"https://vanxnf.top/2018/09/01/Sublime-Text-3-Ubuntu-18-04-无法输入中文解决方案/","excerpt":"","text":"本方案来自 GitHub 项目 sublime-text-imfix ， 感谢 lyfeyaj 的付出。 前置条件 已安装 Sublime Text 3 已安装 Fcitx 输入框架 后续步骤 更新系统到最新 1sudo apt-get update &amp;&amp; sudo apt-get upgrade 克隆项目到本地 1git clone https://github.com/lyfeyaj/sublime-text-imfix.git 进入项目文件夹 1cd sublime-text-imfix 执行修复脚本 1sudo ./sublime-imfix 显示以下内容即修复成功： 12345Done!Thanks for using this script to fix CJK Input Method problem of SublimeText 2/3.Re-login your X windows and start to use SublimeText 2/3 with Fcitx!","categories":[{"name":"Software","slug":"Software","permalink":"https://vanxnf.top/categories/Software/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"Sublime Text 3","slug":"Sublime-Text-3","permalink":"https://vanxnf.top/tags/Sublime-Text-3/"}]},{"title":"Ubuntu 18.04 LTS 配置 Hexo","slug":"Ubuntu-18-04-LTS-配置-Hexo","date":"2018-09-01T07:17:54.000Z","updated":"2018-09-01T07:17:54.000Z","comments":true,"path":"2018/09/01/Ubuntu-18-04-LTS-配置-Hexo/","link":"","permalink":"https://vanxnf.top/2018/09/01/Ubuntu-18-04-LTS-配置-Hexo/","excerpt":"","text":"GitHub Pages + Hexo 搭建博客可查看 Ubuntu 18.04 LTS GitHub Pages + Hexo 搭建博客 环境搭建 git 首先需要在系统中安装git：sudo apt install git 可以先检查是否安装git：git --version 然后是对git的一些基本配置： 12git config --global user.name &quot;username&quot;git config --global user.email &quot;youremail&quot; node.js 安装：sudo apt install nodejs npm npm ( nodejs的包管理工具)：sudo apt insatll npm 管理工具的使用： 升级新版npm：sudo npm install npm -g 使用npm安装模块：npm install module_name 查看所有全局安装的npm模块：npm ls -g 模块的卸载：npm uninstall module_name 更新模块：npm update module_name 安装 Hexo 创建目录 1mkdir hexo 切换目录 1cd hexo 全局安装 Hexo 1sudo npm install -g hexo-cli 初始化 Hexo 1hexo init 运行 Hexo 1hexo server 成功运行的话会提示： 12INFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. Hexo 主题 Hexo 主题可以从这里找：https://hexo.io/themes/ 推荐安装主题 NexT 到目录 hexo 下： 12cd ~/Documents/hexo/git clone https://github.com/iissnan/hexo-theme-next themes/next 并在目录 hexo 下的 _config.yml 中找到 theme: 修改后面的参数，默认是 landscape，改为 1theme: next 常用指令 新建博客项目，默认为指定的 folder 文件夹; 1hexo init [folder] 新建文章，总共有post、draft、page三种 layout，文章以你指定的 title 名创建，title 中如果有空格请使用“”括起来; 1hexo new [layout] &lt;title&gt; 生成静态文件，下面的代码为简写，可以添加 -w 参数监视文件的变动; 12hexo generatehexo g 启动本地服务器，可以添加参数 -p 指定服务器的端口，默认在端口4000 12hexo serverhexo s 博客项目部署 12hexo deployhexo d 一键静态文件生成与部署 12hexo g -dhexo d -g 清楚缓存和生成的静态文件，对应于 db.json 和 public 目录下的文件 12hexo cleanhexo cl 列出博客文件树 1hexo list route","categories":[{"name":"Programming","slug":"Programming","permalink":"https://vanxnf.top/categories/Programming/"}],"tags":[{"name":"Ubuntu 18.04 LTS","slug":"Ubuntu-18-04-LTS","permalink":"https://vanxnf.top/tags/Ubuntu-18-04-LTS/"},{"name":"Hexo","slug":"Hexo","permalink":"https://vanxnf.top/tags/Hexo/"}]}]}